<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[React Native开发环境的搭建（Mac）]]></title>
    <url>%2F2019%2F05%2F24%2FReact-Native%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%88Mac%EF%BC%89%2F</url>
    <content type="text"><![CDATA[安装依赖 先安装Homebrew（若已安装，可跳过） 1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 安装node和webpack 123brew install nodebrew install webpack 测试node和webpack是否安装成功，可用如下命令进行检测。若本地安装，则会显示对应版本号。 123node -v webpack -v 设置国内镜像（常年开vpn的可以忽略） 1npm config set disturl https://npm.taobao.org/dist --global 这里出错了，按提示走就可以，复制sudo那一行更改目录权限，再设置国内镜像。 安装RN：直接输入npm install -g react-native-cli。会因为权限不够而报错：npm WARN checkPermissions Missing write access to /usr/local/lib/node_modules。所以我们直接输入下面两句话 123sudo chown -R $(whoami) /usr/local/*npm install -g yarn react-native-cli 测试是否安装成功： 1react-native -v 创建RN项目到本地 创建RN项目 1react-native init AwesomeProject 编译并运行 React Native 应用 12cd AwesomeProjectreact-native run-ios 提示：如果 run-ios 无法正常运行，请使用 Xcode 运行来查看具体错误（run-ios 的报错没有任何具体信息）。第一次运行会比较慢，需要耐心等待一下 修改项目 现在你已经成功运行了项目，我们可以开始尝试动手改一改了： 使用你喜欢的编辑器打开App.js并随便改上几行。 在 iOS 模拟器中按下⌘-R就可以刷新 APP并看到你的最新修改！（如果没有反应，请检查模拟器的 Hardware 菜单中，connect hardware keyboard 选项是否选中开启） 大功告成]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[iOS截图那些事]]></title>
    <url>%2F2018%2F09%2F06%2FiOS%E6%88%AA%E5%9B%BE%E9%82%A3%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[普通view截图12345678910+ (UIImage *)gjj_viewScreenShot:(UIView *)view &#123;UIGraphicsBeginImageContextWithOptions(CGSizeMake(view.frame.size.width, view.frame.size.height ), NO, 0.0);[view.layer renderInContext:UIGraphicsGetCurrentContext()];/// 返回一个基于当前图形上下文的图片UIImage *viewImage = UIGraphicsGetImageFromCurrentImageContext();/// 移除栈顶的基于当前位图的图形上下文UIGraphicsEndImageContext();return viewImage;&#125; tableView、collectionView等scrollView生成长截图实现步骤 保存scrollView截取前的偏移量及Frame 计算出你要截取的长图的高度及宽度，即scrollView的contentSize，将scrollView.frame设成scrollView.contentSize 渲染出scrollView整体（上下文），截取当前scrollView生成Image 恢复scrollView的偏移量及Frame 12345678910111213141516+ (UIImage *)gjj_scrollViewScreenShot:(UIScrollView *)scrollView &#123;UIImage *image = nil;UIGraphicsBeginImageContextWithOptions(scrollView.contentSize, YES, [UIScreen mainScreen].scale);CGPoint saveContentOffset = scrollView.contentOffset;CGRect savedFrame = scrollView.frame;scrollView.contentOffset = CGPointZero;scrollView.frame = CGRectMake(0, 0, scrollView.contentSize.width, scrollView.contentSize.height);[scrollView.layer renderInContext:UIGraphicsGetCurrentContext()];scrollView.layer.contents = nil;image = UIGraphicsGetImageFromCurrentImageContext();scrollView.contentOffset = saveContentOffset;scrollView.frame = savedFrame;UIGraphicsEndImageContext();return image;&#125; webView生成长截图webView和scrollView的截图大同小异 12345678910111213141516+ (UIImage *)gjj_webViewScreenShot:(UIWebView *)webView &#123;UIImage *image = nil;UIGraphicsBeginImageContextWithOptions(webView.scrollView.contentSize, YES, [UIScreen mainScreen].scale);CGPoint saveContentOffset = webView.scrollView.contentOffset;CGRect savedFrame = webView.frame;webView.scrollView.contentOffset = CGPointZero;webView.frame = CGRectMake(0, 0, webView.scrollView.contentSize.width, webView.scrollView.contentSize.height);[webView.layer renderInContext:UIGraphicsGetCurrentContext()];webView.layer.contents = nil;image = UIGraphicsGetImageFromCurrentImageContext();webView.scrollView.contentOffset = saveContentOffset;webView.frame = savedFrame;UIGraphicsEndImageContext();return image;&#125; 图片拼接很多需求是截图附带二维码等进行分享。 123456789101112131415161718192021222324+ (UIImage *)gjj_addHeadImage:(UIImage *)headImage footImage:(UIImage *)footImage toMasterImage:(UIImage *)masterImage &#123;CGSize size;size.width = masterImage.size.width;CGFloat headProportion = !headImage?0:(headImage.size.width / headImage.size.height);CGFloat footProportion = !footImage?0:(footImage.size.width / footImage.size.height);CGFloat headHeight = !headImage? 0:masterImage.size.width/headProportion;CGFloat footHeight = !footImage? 0:footImage.size.width/footProportion;size.height = masterImage.size.height + headHeight + footHeight;UIGraphicsBeginImageContextWithOptions(size, YES, 0.0);if (headImage) &#123;[headImage drawInRect:CGRectMake(0, 0, masterImage.size.width, headHeight)];&#125;[masterImage drawInRect:CGRectMake(0, headHeight, masterImage.size.width, masterImage.size.height)];if (footImage) &#123;[footImage drawInRect:CGRectMake(0, masterImage.size.height + headHeight, masterImage.size.width, footHeight)];&#125;UIImage *resultImage = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext();return resultImage;&#125; 添加水印12345678910+ (UIImage *)gjj_addWaterImage:(UIImage *)waterImage toMasterImage:(UIImage *)masterImage waterImageRect:(CGRect)rect &#123;UIGraphicsBeginImageContextWithOptions(masterImage.size, NO, 0);[masterImage drawInRect:CGRectMake(0, 0, masterImage.size.width, masterImage.size.height)];/// 绘制水印图片到当前上下文[waterImage drawInRect:rect];UIImage * newImage = UIGraphicsGetImageFromCurrentImageContext();UIGraphicsEndImageContext();return newImage;&#125;]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>iOS</tag>
        <tag>截图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【C实现】给出一个字符串，要求将其按照单词顺序进行反转]]></title>
    <url>%2F2018%2F08%2F21%2F%E3%80%90C%E5%AE%9E%E7%8E%B0%E3%80%91%E7%BB%99%E5%87%BA%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E8%A6%81%E6%B1%82%E5%B0%86%E5%85%B6%E6%8C%89%E7%85%A7%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F%E8%BF%9B%E8%A1%8C%E5%8F%8D%E8%BD%AC%2F</url>
    <content type="text"><![CDATA[题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the sky is blue”,那么反转之后的结果就是”blue is sky the”。问题分析： 每个单词长度不一致 空格需要特殊处理 使用C语言实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445void swap (char chars[], int p, int q);void reverse (char chars[], int start, int end);void reverseWords(char strings[]);int main(int argc, const char * argv[]) &#123;@autoreleasepool &#123;char string[] = &quot;the sky is blue&quot;;reverseWords(string);&#125;return 0;&#125;void swap (char chars[], int p, int q) &#123;char temp = chars[p];chars[p] = chars[q];chars[q] = temp;&#125;void reverse (char chars[], int start, int end) &#123;NSLog(@&quot;%s&quot;,chars);int s = start;int e = end;while (s &lt; e) &#123;swap(chars, s, e);s += 1;e -= 1;&#125;NSLog(@&quot;%s&quot;,chars);&#125;void reverseWords(char strings[]) &#123;if ((int)strlen(strings) == 0) &#123;return;&#125;int start = 0, len = (int)strlen(strings);reverse(strings, 0, len - 1);for (int i = 0 ; i &lt; len; i++) &#123;if ((i == len - 1) || (strings[i + 1] == &apos; &apos;)) &#123;reverse(strings, start, i);start = i + 2;&#125;&#125;NSLog(@&quot;%s&quot;,strings);&#125; 控制台打印：2018-08-14 16:04:22.815076+0800 算法[6268:668783] blue is sky the]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[QLPreviewController]]></title>
    <url>%2F2018%2F05%2F14%2Fhello-world%2F</url>
    <content type="text"><![CDATA[QLPreviewController在iOS中用于方便预览文件，它支持的文件有： iWork文档 微软Office97以上版本的文档 RTF文档 PDF文件 图片文件 文本文件和CSV文件 使用的时候首先要引用#import &lt;QuickLook/QuickLook.h&gt;。 初始化： 12345_qlPreviewController = [[ QLPreviewController alloc]init]; _qlPreviewController.dataSource = self; _qlPreviewController.delegate = self; [self presentViewController:_qlPreviewController animated:YES completion:nil]; QLPreviewController类似于Tableview的使用方法，也是首先遵循代理和数据源代理。然后实现代理方法，如下： 123456789-(NSInteger)numberOfPreviewItemsInPreviewController:(QLPreviewController *)controller&#123; return 2;&#125;-(id&lt;QLPreviewItem&gt;)previewController:(QLPreviewController *)controller previewItemAtIndex:(NSInteger)index&#123; NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;aa&quot; ofType:@&quot;doc&quot;]; NSURL *myDoucment = [NSURL fileURLWithPath:path]; return myDoucment;&#125;]]></content>
      <categories>
        <category>Object-C</category>
      </categories>
  </entry>
</search>
