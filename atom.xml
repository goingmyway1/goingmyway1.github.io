<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不靠谱的程序猿</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-05-24T09:30:05.613Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sheffi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Native开发环境的搭建（Mac）</title>
    <link href="http://yoursite.com/2019/05/24/React-Native%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%88Mac%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/24/React-Native开发环境的搭建（Mac）/</id>
    <published>2019-05-24T06:38:30.000Z</published>
    <updated>2019-05-24T09:30:05.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ol><li>先安装Homebrew（若已安装，可跳过）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>安装node和webpack</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br><span class="line"></span><br><span class="line">brew install webpack</span><br></pre></td></tr></table></figure><pre><code>测试node和webpack是否安装成功，可用如下命令进行检测。若本地安装，则会显示对应版本号。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">  </span><br><span class="line">webpack -v</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="3"><li><p>设置国内镜像（常年开vpn的可以忽略）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure><p> 这里出错了，按提示走就可以，复制sudo那一行更改目录权限，再设置国内镜像。</p></li><li><p>安装RN：直接输入<code>npm install -g react-native-cli</code>。会因为权限不够而报错：npm WARN checkPermissions Missing write access to /usr/local/lib/node_modules。所以我们直接输入下面两句话</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) /usr/local/*</span><br><span class="line"></span><br><span class="line">npm install -g yarn react-native-cli</span><br></pre></td></tr></table></figure><p>测试是否安装成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native -v</span><br></pre></td></tr></table></figure></li></ol><h2 id="创建RN项目到本地"><a href="#创建RN项目到本地" class="headerlink" title="创建RN项目到本地"></a>创建RN项目到本地</h2><ol><li><p>创建RN项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init AwesomeProject</span><br></pre></td></tr></table></figure></li><li><p>编译并运行 React Native 应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd AwesomeProject</span><br><span class="line">react-native run-ios</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>提示：如果 run-ios 无法正常运行，请使用 Xcode 运行来查看具体错误（run-ios 的报错没有任何具体信息）。第一次运行会比较慢，需要耐心等待一下</p></blockquote><ol start="3"><li><p>修改项目</p><p> 现在你已经成功运行了项目，我们可以开始尝试动手改一改了：</p></li></ol><ul><li>使用你喜欢的编辑器打开App.js并随便改上几行。 </li><li>在 iOS 模拟器中按下<em>⌘-R</em>就可以刷新 APP并看到你的最新修改！（如果没有反应，请检查模拟器的 Hardware 菜单中，connect hardware keyboard    选项是否选中开启）</li></ul><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><img src="/2019/05/24/React-Native开发环境的搭建（Mac）/皮卡丘.gif" title="This is an example image">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;先安装Homebrew（若已安装，可跳过）&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;安装node和webpack&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install webpack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;测试node和webpack是否安装成功，可用如下命令进行检测。若本地安装，则会显示对应版本号。
&lt;/code&gt;&lt;/pre&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webpack -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>iOS截图那些事</title>
    <link href="http://yoursite.com/2018/09/06/iOS%E6%88%AA%E5%9B%BE%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://yoursite.com/2018/09/06/iOS截图那些事/</id>
    <published>2018-09-06T02:45:04.000Z</published>
    <updated>2018-09-07T06:14:26.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通view截图"><a href="#普通view截图" class="headerlink" title="普通view截图"></a>普通view截图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (UIImage *)gjj_viewScreenShot:(UIView *)view &#123;</span><br><span class="line">UIGraphicsBeginImageContextWithOptions(CGSizeMake(view.frame.size.width, view.frame.size.height ), NO, 0.0);</span><br><span class="line">[view.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class="line">/// 返回一个基于当前图形上下文的图片</span><br><span class="line">UIImage *viewImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line"></span><br><span class="line">/// 移除栈顶的基于当前位图的图形上下文</span><br><span class="line">UIGraphicsEndImageContext();</span><br><span class="line">return viewImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="tableView、collectionView等scrollView生成长截图"><a href="#tableView、collectionView等scrollView生成长截图" class="headerlink" title="tableView、collectionView等scrollView生成长截图"></a>tableView、collectionView等scrollView生成长截图</h2><p>实现步骤</p><ol><li>保存scrollView截取前的偏移量及Frame</li><li>计算出你要截取的长图的高度及宽度，即scrollView的contentSize，将scrollView.frame设成scrollView.contentSize</li><li>渲染出scrollView整体（上下文），截取当前scrollView生成Image</li><li>恢复scrollView的偏移量及Frame</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+ (UIImage *)gjj_scrollViewScreenShot:(UIScrollView *)scrollView &#123;</span><br><span class="line">UIImage *image = nil;</span><br><span class="line"></span><br><span class="line">UIGraphicsBeginImageContextWithOptions(scrollView.contentSize, YES, [UIScreen mainScreen].scale);</span><br><span class="line">CGPoint saveContentOffset = scrollView.contentOffset;</span><br><span class="line">CGRect savedFrame = scrollView.frame;</span><br><span class="line">scrollView.contentOffset = CGPointZero;</span><br><span class="line">scrollView.frame = CGRectMake(0, 0, scrollView.contentSize.width, scrollView.contentSize.height);</span><br><span class="line">[scrollView.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class="line">scrollView.layer.contents = nil;</span><br><span class="line">image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">scrollView.contentOffset = saveContentOffset;</span><br><span class="line">scrollView.frame = savedFrame;</span><br><span class="line">UIGraphicsEndImageContext();</span><br><span class="line">return image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webView生成长截图"><a href="#webView生成长截图" class="headerlink" title="webView生成长截图"></a>webView生成长截图</h2><p>webView和scrollView的截图大同小异</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+ (UIImage *)gjj_webViewScreenShot:(UIWebView *)webView &#123;</span><br><span class="line">UIImage *image = nil;</span><br><span class="line"></span><br><span class="line">UIGraphicsBeginImageContextWithOptions(webView.scrollView.contentSize, YES, [UIScreen mainScreen].scale);</span><br><span class="line">CGPoint saveContentOffset = webView.scrollView.contentOffset;</span><br><span class="line">CGRect savedFrame = webView.frame;</span><br><span class="line">webView.scrollView.contentOffset = CGPointZero;</span><br><span class="line">webView.frame = CGRectMake(0, 0, webView.scrollView.contentSize.width, webView.scrollView.contentSize.height);</span><br><span class="line">[webView.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class="line">webView.layer.contents = nil;</span><br><span class="line">image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">webView.scrollView.contentOffset = saveContentOffset;</span><br><span class="line">webView.frame = savedFrame;</span><br><span class="line">UIGraphicsEndImageContext();</span><br><span class="line">return image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片拼接"><a href="#图片拼接" class="headerlink" title="图片拼接"></a>图片拼接</h2><p>很多需求是截图附带二维码等进行分享。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+ (UIImage *)gjj_addHeadImage:(UIImage *)headImage footImage:(UIImage *)footImage toMasterImage:(UIImage *)masterImage &#123;</span><br><span class="line">CGSize size;</span><br><span class="line">size.width = masterImage.size.width;</span><br><span class="line"></span><br><span class="line">CGFloat headProportion = !headImage?0:(headImage.size.width / headImage.size.height);</span><br><span class="line">CGFloat footProportion = !footImage?0:(footImage.size.width / footImage.size.height);</span><br><span class="line"></span><br><span class="line">CGFloat headHeight = !headImage? 0:masterImage.size.width/headProportion;</span><br><span class="line">CGFloat footHeight = !footImage? 0:footImage.size.width/footProportion;</span><br><span class="line"></span><br><span class="line">size.height = masterImage.size.height + headHeight + footHeight;</span><br><span class="line"></span><br><span class="line">UIGraphicsBeginImageContextWithOptions(size, YES, 0.0);</span><br><span class="line"></span><br><span class="line">if (headImage) &#123;</span><br><span class="line">[headImage drawInRect:CGRectMake(0, 0, masterImage.size.width, headHeight)];</span><br><span class="line">&#125;</span><br><span class="line">[masterImage drawInRect:CGRectMake(0, headHeight, masterImage.size.width, masterImage.size.height)];</span><br><span class="line">if (footImage) &#123;</span><br><span class="line">[footImage drawInRect:CGRectMake(0, masterImage.size.height + headHeight, masterImage.size.width, footHeight)];</span><br><span class="line">&#125;</span><br><span class="line">UIImage *resultImage = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext();</span><br><span class="line">return resultImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加水印"><a href="#添加水印" class="headerlink" title="添加水印"></a>添加水印</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (UIImage *)gjj_addWaterImage:(UIImage *)waterImage toMasterImage:(UIImage *)masterImage waterImageRect:(CGRect)rect &#123;</span><br><span class="line">UIGraphicsBeginImageContextWithOptions(masterImage.size, NO, 0);</span><br><span class="line">[masterImage drawInRect:CGRectMake(0, 0, masterImage.size.width, masterImage.size.height)];</span><br><span class="line">/// 绘制水印图片到当前上下文</span><br><span class="line">[waterImage drawInRect:rect];</span><br><span class="line"></span><br><span class="line">UIImage * newImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">UIGraphicsEndImageContext();</span><br><span class="line">return newImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;普通view截图&quot;&gt;&lt;a href=&quot;#普通view截图&quot; class=&quot;headerlink&quot; title=&quot;普通view截图&quot;&gt;&lt;/a&gt;普通view截图&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (UIImage *)gjj_viewScreenShot:(UIView *)view &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIGraphicsBeginImageContextWithOptions(CGSizeMake(view.frame.size.width, view.frame.size.height ), NO, 0.0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[view.layer renderInContext:UIGraphicsGetCurrentContext()];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// 返回一个基于当前图形上下文的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIImage *viewImage = UIGraphicsGetImageFromCurrentImageContext();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// 移除栈顶的基于当前位图的图形上下文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIGraphicsEndImageContext();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return viewImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="截图" scheme="http://yoursite.com/tags/%E6%88%AA%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>【C实现】给出一个字符串，要求将其按照单词顺序进行反转 </title>
    <link href="http://yoursite.com/2018/08/21/%E3%80%90C%E5%AE%9E%E7%8E%B0%E3%80%91%E7%BB%99%E5%87%BA%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E8%A6%81%E6%B1%82%E5%B0%86%E5%85%B6%E6%8C%89%E7%85%A7%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F%E8%BF%9B%E8%A1%8C%E5%8F%8D%E8%BD%AC/"/>
    <id>http://yoursite.com/2018/08/21/【C实现】给出一个字符串，要求将其按照单词顺序进行反转/</id>
    <published>2018-08-21T02:35:59.000Z</published>
    <updated>2018-09-07T06:13:51.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the-sky-is-blue”-那么反转之后的结果就是”blue-is-sky-the”。"><a href="#题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the-sky-is-blue”-那么反转之后的结果就是”blue-is-sky-the”。" class="headerlink" title="题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the sky is blue”,那么反转之后的结果就是”blue is sky the”。"></a>题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the sky is blue”,那么反转之后的结果就是”blue is sky the”。</h2><p>问题分析：</p><ul><li>每个单词长度不一致</li><li>空格需要特殊处理</li></ul><a id="more"></a><p>使用C语言实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">void swap (char chars[], int p, int q);</span><br><span class="line">void reverse (char chars[], int start, int end);</span><br><span class="line">void reverseWords(char strings[]);</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">@autoreleasepool &#123;</span><br><span class="line">char string[] = &quot;the sky is blue&quot;;</span><br><span class="line">reverseWords(string);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void swap (char chars[], int p, int q) &#123;</span><br><span class="line">char temp = chars[p];</span><br><span class="line">chars[p] = chars[q];</span><br><span class="line">chars[q] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void reverse (char chars[], int start, int end) &#123;</span><br><span class="line">NSLog(@&quot;%s&quot;,chars);</span><br><span class="line">int s = start;</span><br><span class="line">int e = end;</span><br><span class="line"></span><br><span class="line">while (s &lt; e) &#123;</span><br><span class="line">swap(chars, s, e);</span><br><span class="line">s += 1;</span><br><span class="line">e -= 1;</span><br><span class="line">&#125;</span><br><span class="line">NSLog(@&quot;%s&quot;,chars);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void reverseWords(char strings[]) &#123;</span><br><span class="line">if ((int)strlen(strings) == 0) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int start = 0, len = (int)strlen(strings);</span><br><span class="line">reverse(strings, 0, len - 1);</span><br><span class="line">for (int i = 0 ; i &lt; len; i++) &#123;</span><br><span class="line">if ((i == len - 1) || (strings[i + 1] == &apos; &apos;)) &#123;</span><br><span class="line">reverse(strings, start, i);</span><br><span class="line">start = i + 2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">NSLog(@&quot;%s&quot;,strings);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印：<code>2018-08-14 16:04:22.815076+0800 算法[6268:668783] blue is sky the</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the-sky-is-blue”-那么反转之后的结果就是”blue-is-sky-the”。&quot;&gt;&lt;a href=&quot;#题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the-sky-is-blue”-那么反转之后的结果就是”blue-is-sky-the”。&quot; class=&quot;headerlink&quot; title=&quot;题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the sky is blue”,那么反转之后的结果就是”blue is sky the”。&quot;&gt;&lt;/a&gt;题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the sky is blue”,那么反转之后的结果就是”blue is sky the”。&lt;/h2&gt;&lt;p&gt;问题分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个单词长度不一致&lt;/li&gt;
&lt;li&gt;空格需要特殊处理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>QLPreviewController</title>
    <link href="http://yoursite.com/2018/05/14/hello-world/"/>
    <id>http://yoursite.com/2018/05/14/hello-world/</id>
    <published>2018-05-14T13:53:54.000Z</published>
    <updated>2018-09-07T06:14:07.776Z</updated>
    
    <content type="html"><![CDATA[<p>QLPreviewController在iOS中用于方便预览文件，它支持的文件有：</p><ul><li>iWork文档</li><li>微软Office97以上版本的文档</li><li>RTF文档</li><li>PDF文件</li><li>图片文件</li><li><p>文本文件和CSV文件</p><p>使用的时候首先要引用<code>#import &lt;QuickLook/QuickLook.h&gt;</code>。</p><a id="more"></a><p>初始化：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_qlPreviewController = [[ QLPreviewController alloc]init];</span><br><span class="line"> _qlPreviewController.dataSource = self;</span><br><span class="line"> _qlPreviewController.delegate = self;</span><br><span class="line"> </span><br><span class="line"> [self presentViewController:_qlPreviewController animated:YES completion:nil];</span><br></pre></td></tr></table></figure><p> QLPreviewController类似于Tableview的使用方法，也是首先遵循代理和数据源代理。然后实现代理方法，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-(NSInteger)numberOfPreviewItemsInPreviewController:(QLPreviewController *)controller&#123;</span><br><span class="line">    return 2;</span><br><span class="line">&#125;</span><br><span class="line">-(id&lt;QLPreviewItem&gt;)previewController:(QLPreviewController *)controller previewItemAtIndex:(NSInteger)index&#123;</span><br><span class="line">    NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;aa&quot; ofType:@&quot;doc&quot;];</span><br><span class="line">    NSURL *myDoucment = [NSURL fileURLWithPath:path];</span><br><span class="line">    return myDoucment;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QLPreviewController在iOS中用于方便预览文件，它支持的文件有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iWork文档&lt;/li&gt;
&lt;li&gt;微软Office97以上版本的文档&lt;/li&gt;
&lt;li&gt;RTF文档&lt;/li&gt;
&lt;li&gt;PDF文件&lt;/li&gt;
&lt;li&gt;图片文件&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文本文件和CSV文件&lt;/p&gt;
&lt;p&gt;使用的时候首先要引用&lt;code&gt;#import &amp;lt;QuickLook/QuickLook.h&amp;gt;&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Object-C" scheme="http://yoursite.com/categories/Object-C/"/>
    
    
  </entry>
  
</feed>
