<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不靠谱的程序猿</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2023-04-06T09:33:57.786Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sheffi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PMP-项目管理概述</title>
    <link href="http://yoursite.com/2023/04/06/PMP-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2023/04/06/PMP-项目管理概述/</id>
    <published>2023-04-06T07:54:09.000Z</published>
    <updated>2023-04-06T09:33:57.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-项目"><a href="#1-项目" class="headerlink" title="1. 项目"></a>1. 项目</h2><h3 id="1-1-项目定义"><a href="#1-1-项目定义" class="headerlink" title="1.1 项目定义"></a>1.1 项目定义</h3><blockquote><p>项目是为创造独特的产品、服务或成果而进行的临时性工作。</p></blockquote><h4 id="1-1-1-项目的特点"><a href="#1-1-1-项目的特点" class="headerlink" title="1.1.1 项目的特点"></a>1.1.1 项目的特点</h4><ul><li>临时性 - 是指项目有明确的起点和终点</li><li>独特性 - 独特的产品、服务或成果</li><li>渐进明细 - 越来清楚</li><li>项目驱动变革 - 从商业角度看，项目旨在推动组织从一个状态转到另一个状态，从而达到特定目标。从项目开始之前，通常将此时的组织描述为“当前状态”。项目驱动变革是为了获得期望的结果，即“将来状态”。有些项目可能会创造一个过渡状态，即由多个步骤组成的连续区间，以过渡到将来状态。通过成功完成项目，组织可以实现将来状态并达成特定目标。</li></ul><h3 id="1-2-项目创造商业价值"><a href="#1-2-项目创造商业价值" class="headerlink" title="1.2 项目创造商业价值"></a>1.2 项目创造商业价值</h3><p>PMI将商业价值定义为从商业运作中获得的可量化净效益。效益以有形的、无形的或两者兼有之。有形效益的例子包括：货币资产；股东权益；公共事业；固定设施；工具；市场份额。无形效益的例子包括：商誉；品牌认知度；公共利益；商标；战略一致性；声誉。</p><h3 id="1-3-项目启动与终止"><a href="#1-3-项目启动与终止" class="headerlink" title="1.3 项目启动与终止"></a>1.3 项目启动与终止</h3><h4 id="1-3-1-项目启动背景"><a href="#1-3-1-项目启动背景" class="headerlink" title="1.3.1 项目启动背景"></a>1.3.1 项目启动背景</h4><ul><li>符合法规、法律或社会要求</li><li>满足相关方（也指干系人或stakeholder利害关系者）的要求或请求</li><li>执行、变更业务或技术战略</li><li>创造、改进或修复产品、过程或服务  =&gt; 可交付成果</li></ul><h4 id="1-3-2-项目结束条件"><a href="#1-3-2-项目结束条件" class="headerlink" title="1.3.2 项目结束条件"></a>1.3.2 项目结束条件</h4><ul><li>达成项目目标</li><li>不会或不能达到目标</li><li>项目资金缺乏或没有可分配资金</li><li>项目需求不复存在</li><li>无法获得所需人力或物力资源</li><li>出于法律或便利原因而终止项目</li></ul><blockquote><p>注：项目结束要进行：1. 项目成果移交 2. 调查失败原因</p></blockquote><h3 id="1-4-项目与运营的比较"><a href="#1-4-项目与运营的比较" class="headerlink" title="1.4 项目与运营的比较"></a>1.4 项目与运营的比较</h3><table><thead><tr><th><strong>区别分类</strong></th><th><strong>区别点</strong></th><th><strong>项目</strong></th><th><strong>运营</strong></th></tr></thead><tbody><tr><td><strong>工作性质与内容</strong></td><td>时效性</td><td>一次性</td><td>持续不断</td></tr><tr><td></td><td>频率特征</td><td>临时性</td><td>重复性</td></tr><tr><td></td><td>工作内容</td><td>基本都是创新性工作</td><td>经营、很少创新</td></tr><tr><td><strong>工作环境</strong></td><td>工作环境</td><td>相对开放、不确定</td><td>相对封闭、稳定</td></tr><tr><td><strong>组织与管理</strong></td><td>负责人</td><td>项目经理</td><td>职能经理（FM）/运营经理</td></tr><tr><td></td><td>实施团队</td><td>项目团队</td><td>职能部门、产品线</td></tr><tr><td></td><td>组织结构</td><td>相对变化、临时</td><td>相对不变</td></tr></tbody></table><h2 id="2-项目管理"><a href="#2-项目管理" class="headerlink" title="2. 项目管理"></a>2. 项目管理</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><ul><li>项目管理就是将知识、技能、工具与技术应用于项目活动，以产出可交付成果及达到项目目标，项目成功是在竞争性制约因素下实现预期的商业价值。</li><li>在PMOK中包含十大知识领域（整合管理、范围管理、进度管理、成本管理、质量管理、资源管理、沟通管理、风险管理、采购管理、相关方管理）和五大管理过程组（启动、规划、执行、监控、收尾）以及49个子过程。 生命周期阶段（有时间顺序）：1.启动项目 2.组织与准备 3.执行项目工作 4.结束项目</li></ul><h3 id="2-2-项目管理的重要性"><a href="#2-2-项目管理的重要性" class="headerlink" title="2.2 项目管理的重要性"></a>2.2 项目管理的重要性</h3><ul><li>有效的项目管理能够帮助个人、群体以及公共和私人组织：达成业务目标；</li><li>满足相关方的期望</li><li>提高可预测性</li><li>提高成功的概率</li><li>在适当的时间交付正确的产品</li><li>解决问题和争议</li><li>及时应对风险</li><li>优化组织资源的使用</li><li>识别、挽救或终止失败项目</li><li>管理制约因素（例如范围、进度、质量、进度、成本、资源）</li><li>平衡制约因素对项目的影响（例如范围扩大可能会增加成本或延长进度）</li><li>以更好的方式管理变更</li></ul><h4 id="2-2-1-项目管理不善或缺乏项目管理可能会导致：-项目管理不善或缺乏项目管理可能会导致："><a href="#2-2-1-项目管理不善或缺乏项目管理可能会导致：-项目管理不善或缺乏项目管理可能会导致：" class="headerlink" title="2.2.1 项目管理不善或缺乏项目管理可能会导致： 项目管理不善或缺乏项目管理可能会导致："></a>2.2.1 项目管理不善或缺乏项目管理可能会导致： 项目管理不善或缺乏项目管理可能会导致：</h4><ul><li>超过时限</li><li>成本超支</li><li>质量低劣</li><li>返工</li><li>项目范围扩大失控</li><li>组织声誉受损</li><li>相关方不满意</li><li>正在实施的项目无法达成目标</li></ul><h3 id="2-3-生命周期"><a href="#2-3-生命周期" class="headerlink" title="2.3 生命周期"></a>2.3 生命周期</h3><h4 id="2-3-1-项目生命周期的特征"><a href="#2-3-1-项目生命周期的特征" class="headerlink" title="2.3.1 项目生命周期的特征"></a>2.3.1 项目生命周期的特征</h4><ul><li><strong>预测型</strong>生命周期，在生命周期的早期阶段确定项目范围、时间和成本。对任何范围的变更都要进行仔细管理。预测型生命周期也称为瀑布型生命周期。</li><li><strong>迭代型</strong>生命周期，项目范围通常于项目生命周期的的早期确定，但时间及成本估算将伴随着项目团队对产品理解的不断深入而定期修改。迭代方法是通过一系列重复的循环活动来开发产品，而增量方法是渐进的增加产品的功能。</li><li><strong>增量型</strong>生命周期是通过在预定时间区间内渐进增加产品功能的一些列迭代来产出可交付成果。只有在最后一次迭代之后，可交付成果具有了必要和足够的能力，才能视为完整的。</li><li><strong>适应型</strong>生命周期属于<strong>敏捷型</strong>、<strong>迭代型</strong>和<strong>增量型。</strong>详细范围在迭代开始之前就得到了定义和批准，适应型生命周期也称为敏捷或变更驱动型生命周期。</li><li><strong>混合型</strong>生命周期是<strong>预测型</strong>生命周期和<strong>适应型</strong>生命周期的组合。充分了解或有确定需求的项目要素遵循<strong>预测型</strong>开发生命周期，而仍在发展中的要素遵循<strong>适应型</strong>开发生命周期。</li></ul><table><thead><tr><th><strong>方法</strong></th><th><strong>需求</strong></th><th><strong>活动</strong></th><th><strong>交付</strong></th><th><strong>目标</strong></th></tr></thead><tbody><tr><td>预测型</td><td>固定</td><td>整个项目仅执行一次</td><td>一次交付</td><td>管理成本</td></tr><tr><td>迭代型</td><td>动态</td><td>反复执行直至修正</td><td>一次交付</td><td>解决方案的正确性</td></tr><tr><td>增量型</td><td>动态</td><td>对给定增量执行一次</td><td>频繁小规模交付</td><td>速度</td></tr><tr><td>敏捷型</td><td>动态</td><td>反复执行直至修正</td><td>频繁小规模交付</td><td>通过频繁小规模交付和反馈实现的客户价值</td></tr><tr><td>混合型</td><td>结合了敏捷和预测的方法；混合型生命周期作为过渡策略；混合敏捷方法</td><td></td><td></td></tr></tbody></table><h4 id="2-3-2-预测型需求评估与关键业务-项目文件的相互关系"><a href="#2-3-2-预测型需求评估与关键业务-项目文件的相互关系" class="headerlink" title="2.3.2 预测型需求评估与关键业务/项目文件的相互关系"></a>2.3.2 预测型需求评估与关键业务/项目文件的相互关系</h4><ol><li>项目前期准备：时间表（这里指的粗时间）；需求评估（粗需求）；商业论证做出效益管理计划。</li><li>开始项目（启动）：商业论证基于合同进行指定项目章程，正式任命项目管理PM。</li><li>开启动大会</li><li>组织与准备：指定项目管理计划（详细）=&gt; 12子计划（制度）+ 3基准（范围、成本、进度/质量标准）</li><li>kickoff启动会</li><li>执行项目工作：100%原则，只干计划里面的活，其他走变更</li><li>产生可交付成果</li><li>结束项目</li><li>移交可交付成果，总结经验教训</li></ol><h3 id="2-4-项目目标"><a href="#2-4-项目目标" class="headerlink" title="2.4 项目目标"></a>2.4 项目目标</h3><h4 id="2-4-1-smart原则"><a href="#2-4-1-smart原则" class="headerlink" title="2.4.1 smart原则"></a>2.4.1 smart原则</h4><ul><li>S（specific）明确的</li><li>M（measurable）可测量的</li><li>A（attainable）可实现的</li><li>R（rewarding）相关联的 ①目标和公司战略相关联②大目标分为各个子目标，各个子目标有关联性，协同资源</li><li>T（time-based）有时限的</li></ul><h3 id="2-5-项目成功标准"><a href="#2-5-项目成功标准" class="headerlink" title="2.5 项目成功标准"></a>2.5 项目成功标准</h3><ul><li>满足项目管理测量指标</li><li>完成项目效益管理计划</li><li>达到商业论证中记录的已商定的财务测量指标（净现值NPV、投资回报率ROI、内部报酬率IRR、回收期PBP、效益成本比率BCR）</li><li>相关方满意</li><li>达到组织战略目标</li><li>其他成功标准或准则，例如过程产出率</li></ul><h3 id="2-6-项目运行环境"><a href="#2-6-项目运行环境" class="headerlink" title="2.6 项目运行环境"></a>2.6 项目运行环境</h3><h4 id="2-6-1-事业环境因素"><a href="#2-6-1-事业环境因素" class="headerlink" title="2.6.1 事业环境因素"></a>2.6.1 事业环境因素</h4><h5 id="2-6-1-1-内部因素（限制性条件-制约因素）"><a href="#2-6-1-1-内部因素（限制性条件-制约因素）" class="headerlink" title="2.6.1.1 内部因素（限制性条件/制约因素）"></a>2.6.1.1 内部因素（限制性条件/制约因素）</h5><ul><li>组织文化、结构和治理（例如包括愿景、使命、价值观、信念、文化规范、领导风格、等级制度和职权关系、组织风格、道德和行为规范）</li><li>设施和资源的地理分布</li><li>基础设施</li><li>信息技术软件</li><li>资源可用性</li><li>员工能力</li></ul><h5 id="2-6-1-2-外部因素"><a href="#2-6-1-2-外部因素" class="headerlink" title="2.6.1.2 外部因素"></a>2.6.1.2 外部因素</h5><ul><li>市场条件</li><li>社会和文化影响与问题</li><li>法律限制</li><li>商业数据库</li><li>学术研究</li><li>政府或行业标准</li><li>财务考虑因素</li><li>物理环境因素</li></ul><h4 id="2-6-2-组织过程资产"><a href="#2-6-2-组织过程资产" class="headerlink" title="2.6.2 组织过程资产"></a>2.6.2 组织过程资产</h4><h5 id="2-6-2-1-过程、政策和程序"><a href="#2-6-2-1-过程、政策和程序" class="headerlink" title="2.6.2.1 过程、政策和程序"></a>2.6.2.1 过程、政策和程序</h5><ul><li>指南和标准</li><li>特定的组织标准</li><li>产品和项目生命周期</li><li>程序、模板</li><li>预先批准的供应商清单</li><li>各种合同协议类型</li></ul><h5 id="2-6-2-2-组织知识库"><a href="#2-6-2-2-组织知识库" class="headerlink" title="2.6.2.2 组织知识库"></a>2.6.2.2 组织知识库</h5><ul><li>配置管理知识库</li><li>历史信息与经验教训知识库</li><li>测量与缺陷管理数据库</li><li>财务数据库</li><li>以往的项目档案</li></ul><blockquote><p>知识管理DIKW模型：data 数据 information 工作绩效信息 knowledge 知识（沉淀与分享） wisdom 智慧</p></blockquote><h3 id="2-7-项目、项目集及项目组合管理之间的比较"><a href="#2-7-项目、项目集及项目组合管理之间的比较" class="headerlink" title="2.7 项目、项目集及项目组合管理之间的比较"></a>2.7 项目、项目集及项目组合管理之间的比较</h3><table><thead><tr><th><strong>组织项目管理</strong></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td><strong>项目</strong></td><td><strong>项目集</strong></td><td><strong>项目组合</strong></td></tr><tr><td><strong>定义</strong></td><td>项目是为创造独特的产品、服务或成果而进行的临时性工作</td><td>项目集是一组互相关联且被协调管理的项目、子项目集和项目集活动，以便获得分别管理所无法获得的利益</td><td>项目组合是为实现战略目标而组合在一起的项目、项目集、子项目组合和运营工作的集合</td></tr><tr><td><strong>范围</strong></td><td>项目具有明确的目标。范围在整个项目生命周期中是渐进明细的。</td><td>项目集的范围包括其项目集组件的范围。项目集通过确保各项目集组件的输出和成果协调互补，为组织带来效益。</td><td>项目组合组织范围随着组织战略目标的变化而变化。</td></tr><tr><td><strong>变更</strong></td><td>项目经理对变更和实施过程做出预判，实现对变更的管理和控制。</td><td>项目集的管理方法是随着项目集各组件成果和/或输出的交付，在必要是接受和适应变更，优化效益实现。</td><td>项目组合经理持续监督更广泛内外部环境的变更。</td></tr><tr><td><strong>规划</strong></td><td>在整个项目生命周期中，项目经理渐进明细高层级的信息，将其转化为详细的计划。</td><td>项目集的管理利用高层级的计划，跟踪项目集组件的依赖关系和进展。项目集计划也用于在组件层级指导规划。</td><td>项目组合经理建立并维护与总体项目组合有关的必要过程和沟通。</td></tr><tr><td><strong>管理</strong></td><td>项目经理为实现项目目标而管理项目团队。</td><td>项目集由项目经理管理，其通过协调项目集组件的活动，确保项目集收益预期实现。</td><td>项目组合经理可管理或协调项目组合管理人员或对总体项目组合负有报告职责的项目集和项目人员。</td></tr><tr><td><strong>监督</strong></td><td>项目经理监控项目开展中生产产品、提供服务或成果的工作。</td><td>项目集经理监督项目集组件的进展，确保整体目标、进度计划、预算和项目集效益的实现，</td><td>项目组合经理监督战略变更以及总体资源分配、绩效成果和项目组合风险。</td></tr><tr><td><strong>成功</strong></td><td>成功通过产品和项目的质量、时间表、预算的依从性以及客户满意度水平进行衡量。</td><td>项目集的成功通过项目集向项目组织交付预期效益的能力以及项目集交付所述效益的效率和效果进行衡量。</td><td>成功通过项目组合的总体投资效果和实现的效益进行衡量。</td></tr></tbody></table><h3 id="2-8-PMO（项目组合、项目集或项目管理办公室）"><a href="#2-8-PMO（项目组合、项目集或项目管理办公室）" class="headerlink" title="2.8 PMO（项目组合、项目集或项目管理办公室）"></a>2.8 PMO（项目组合、项目集或项目管理办公室）</h3><p>项目管理办公室（PMO）是对与项目有关的治理过程进行标准化，并促进资源、方法论、工具和技术共享的一个组织结构。关键PMO的能力：培养以交付和成果为导向的能力、保持“全局”观、持续改进、知识转移和变革管理。</p><h3 id="2-9-组织结构"><a href="#2-9-组织结构" class="headerlink" title="2.9 组织结构"></a>2.9 组织结构</h3><table><thead><tr><th><strong>组织结构类型</strong></th><th><strong>项目特征</strong></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td><strong>工作组安排人：</strong></td><td><strong>项目经理批准</strong></td><td><strong>项目经理角色</strong></td><td><strong>资源可用性</strong></td><td><strong>项目预算管理人是谁？</strong></td><td><strong>项目管理人员</strong></td></tr><tr><td><strong>系统型或简单型</strong></td><td>灵活；人员并肩工作</td><td>极少或无</td><td>兼职；工作角色（如协调员）指定与否不限</td><td>极少或无</td><td>负责人或操作员</td><td>极少或无</td></tr><tr><td><strong>职能（集中式）</strong></td><td>正在进行的工作（如设计、制造）</td><td>极少或无</td><td>兼职；工作角色（如协调员）指定与否不限</td><td>极少或无</td><td>职能经理</td><td>兼职</td></tr><tr><td><strong>多部门（职能可复制，各部门几乎不会集中）</strong></td><td>其中之一；产品；生产过程；项目组合；项目集；地理区域；客户类型</td><td>极少或无</td><td>兼职；工作角色（如协调员）指定与否不限</td><td>极少或无</td><td>职能经理</td><td>兼职</td></tr><tr><td><strong>矩阵-强</strong></td><td>按工作职能，项目经理作为一个职能</td><td>中到高</td><td>全职指定 工作角色</td><td>中到高</td><td>项目经理</td><td>全职</td></tr><tr><td><strong>矩阵-弱</strong></td><td>工作职能</td><td>低</td><td>兼职；作为另一项工作的组成部分，并非指定工作角色（如协调员）</td><td>低</td><td>职能经理</td><td>兼职</td></tr><tr><td><strong>矩阵-均衡</strong></td><td>工作职能</td><td>低到中</td><td>兼职；作为一种技能的嵌入职能，不可以是指定工作角色（如协调员）</td><td>低到中</td><td>混合</td><td>兼职</td></tr><tr><td><strong>项目导向（复合、混合）</strong></td><td>项目</td><td>高到几乎全部</td><td>全部指定工作角色</td><td>高到几乎全部</td><td>项目经理</td><td>全职</td></tr><tr><td><strong>虚拟</strong></td><td>网络架构，带有与其他人联系的节点</td><td>低到中</td><td>全职或兼职</td><td>低到中</td><td>混合</td><td>可为全职或兼职</td></tr><tr><td><strong>混合型</strong></td><td>其他类型的混合</td><td>混合</td><td>混合</td><td>混合</td><td>混合</td><td>混合</td></tr><tr><td><strong>PMO</strong></td><td>其他类型的混合</td><td>高到几乎全部</td><td>全职指定工作角色</td><td>高到几乎全部</td><td>项目经理</td><td>全职</td></tr></tbody></table><h3 id="2-10-组织级项目管理（OPM）和战略"><a href="#2-10-组织级项目管理（OPM）和战略" class="headerlink" title="2.10 组织级项目管理（OPM）和战略"></a>2.10 组织级项目管理（OPM）和战略</h3><p>实现战略目标而整合项目组合、项目集和项目管理与组织驱动因素的框架。</p><ul><li>确保组织展开正确的项目并合适的分配关键资源</li><li>确保组织的各个层级都了解组织的战略意愿、支持意愿的举措、目标以及交付成果。</li></ul><h4 id="2-10-1-项目、组织与战略规划"><a href="#2-10-1-项目、组织与战略规划" class="headerlink" title="2.10.1 项目、组织与战略规划"></a>2.10.1 项目、组织与战略规划</h4><p>SWOT矩阵 外部：机会与威胁  内部优势与劣势</p><h3 id="2-11-相关方-干系人"><a href="#2-11-相关方-干系人" class="headerlink" title="2.11 相关方/干系人"></a>2.11 相关方/干系人</h3><ol><li>供应商、客户、最终用户、监管机构</li><li>治理机构、项目管理办公室（PMO）、指导委员会</li><li>项目经理（PM）、项目管理团队、项目团队、执行团队</li></ol><blockquote><p>法约尔管理五项基本职能：组织、计划、协调、控制、领导</p></blockquote><h3 id="2-12PM能力模型"><a href="#2-12PM能力模型" class="headerlink" title="2.12PM能力模型"></a>2.12PM能力模型</h3><p> <img src="https://cdn.nlark.com/yuque/0/2023/png/25445954/1680764389749-e47142f3-bfbe-4553-afc0-342b3ea81d1a.png#averageHue=%23f99a60&amp;clientId=u75c71edf-f9db-4&amp;from=drop&amp;id=u758e1340&amp;name=a5e04d09c83049ce942cbbc06004065b.png&amp;originHeight=260&amp;originWidth=601&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=37720&amp;status=done&amp;style=none&amp;taskId=ub8c73422-f448-485e-b9ad-122a31652a9&amp;title=" alt="a5e04d09c83049ce942cbbc06004065b.png"></p><ul><li>项目管理专业技能：管事（工具/方法）。与项目、项目集合项目组合管理特定领域相关的知识、技能和行为，即角色履行的技术方面。</li><li>领导力：管人的放法。指导、激励和带领团队所需的知识、技能和行为，可帮助组织达成业务目标。</li><li>战略和商务管理：关于行业和组织的知识和专业技能，有助于提高绩效并取得更好的业务成果。</li><li>工作方式：完成工作的方式选择</li><li>商业敏锐度：理解商业场景</li><li>影响力技能：驱动变革</li></ul><h3 id="2-13-领导力风格"><a href="#2-13-领导力风格" class="headerlink" title="2.13 领导力风格"></a>2.13 领导力风格</h3><ul><li>放任型领导（例：允许团队自主决策和设定目标）</li><li>交易型领导（例：关注目标、反馈和；成就以确定奖励，例外管理）</li><li>服务型领导（例：做出服务承诺，处处先为他人着想；关注他人的成长、学习、发展、自主性和福祉；关注人际关系、团体与合作；服务优先于领导）</li><li>变革型领导（例：通过理想化特质和行为 、鼓舞性激励、促进创新和创造，以及个人关怀提高追随者的能力）</li><li>魅力型领导（例：能够激励他人；精神饱满、热情洋溢、充满自信；说服力强）</li><li>交互型领导（例：结合了交易型、变革型和魅力型领导的特点）</li></ul><h3 id="2-14-组织变革"><a href="#2-14-组织变革" class="headerlink" title="2.14 组织变革"></a>2.14 组织变革</h3><h4 id="2-14-1-科特八步变更模型"><a href="#2-14-1-科特八步变更模型" class="headerlink" title="2.14.1 科特八步变更模型"></a>2.14.1 科特八步变更模型</h4><ol><li>Increase Urgency 增加紧迫感</li><li>Build the guiding team 建立指导团队</li><li>Get the right vision 获得正确愿景</li><li>Communicate for buy-in 沟通</li><li>Empower action 授权</li><li>Create short-term wins 创造短期胜利</li><li>Don’t let up 不要放松</li><li>Make it stick 坚持下去 </li></ol><h4 id="2-14-2-1-3步-Creating-a-climate-for-change"><a href="#2-14-2-1-3步-Creating-a-climate-for-change" class="headerlink" title="2.14.2 1-3步 Creating a climate for change"></a>2.14.2 1-3步 Creating a climate for change</h4><ul><li>根据项目特点快速反应组织变革</li><li>项目运行方式对齐变革内容</li><li>成立专门团队应对组织变革对项目带来的影响</li></ul><h4 id="2-14-3-4-6步-Engaging-and-enabling-the-whole-organization"><a href="#2-14-3-4-6步-Engaging-and-enabling-the-whole-organization" class="headerlink" title="2.14.3  4-6步 Engaging and enabling the whole organization"></a>2.14.3  4-6步 Engaging and enabling the whole organization</h4><ul><li>理清沟通渠道，以便重要信息高度可见</li><li>认可奖励成就，激励员工</li><li>避免同时启动太多项目，寻找低成本果实</li></ul><h4 id="2-14-4-7-8步-Implementing-and-sustaining-change"><a href="#2-14-4-7-8步-Implementing-and-sustaining-change" class="headerlink" title="2.14.4  7-8步 Implementing and sustaining change"></a>2.14.4  7-8步 Implementing and sustaining change</h4><ul><li>变革需嵌入组织文化中</li><li>通过培训和指导加强新文化</li></ul><h3 id="2-15-项目经理的人际关系影响"><a href="#2-15-项目经理的人际关系影响" class="headerlink" title="2.15 项目经理的人际关系影响"></a>2.15 项目经理的人际关系影响</h3><ul><li>法定权（Legitimate power：Delegated） -  有获得支持的能力，因为项目职员认为项目经理被正式授予了发号施令</li><li>奖赏权（Reward power） - 有获得支持的能力，因为项目职员认为项目经理有能力直接或间接的分发宝贵的组织酬劳</li><li>处罚权（Penalty power） - 有获得支持的能力，因为项目职员认为项目经理有能力直接或间接的执行他们力图避免的处罚</li><li>专家权（Expert power） - 有获得支持的能力，因为项目职员认为项目经理拥有专门的知识或技能</li><li><p>影响力（Referent power）- 有获得支持的能力，因为项目职员个人对项目经理感兴趣</p><h3 id="2-16-项目合规"><a href="#2-16-项目合规" class="headerlink" title="2.16 项目合规"></a>2.16 项目合规</h3></li><li><p>合规 - 依法合规经营简称合规，是指公司经营活动（包括公司行为和公司职工执行行为）遵守有关法律、法规和公司有关管理制度</p></li><li>合规管理 - 是指为有效识别和防控合规风险，提高全员合规意识而开展的各项管理活动</li><li>合规风险 - 是指因公司经营活动违反法律、法规和公司有关管理制度，指使公司受到处罚、财产损失和声誉损失的风险</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-项目&quot;&gt;&lt;a href=&quot;#1-项目&quot; class=&quot;headerlink&quot; title=&quot;1. 项目&quot;&gt;&lt;/a&gt;1. 项目&lt;/h2&gt;&lt;h3 id=&quot;1-1-项目定义&quot;&gt;&lt;a href=&quot;#1-1-项目定义&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="PMP" scheme="http://yoursite.com/categories/PMP/"/>
    
    
      <category term="PMP" scheme="http://yoursite.com/tags/PMP/"/>
    
  </entry>
  
  <entry>
    <title>iOS Extension断点调试</title>
    <link href="http://yoursite.com/2022/02/09/iOS-Extension%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95/"/>
    <id>http://yoursite.com/2022/02/09/iOS-Extension断点调试/</id>
    <published>2022-02-09T06:37:40.000Z</published>
    <updated>2022-02-09T07:20:00.932Z</updated>
    
    <content type="html"><![CDATA[<p>以Broadcast Upload Extension为例。</p><a id="more"></a><ol><li>选中host APP target，run。</li><li>Debug -&gt; Attach to process by pID or name：XXX(GDTScreenShareExtension – 这里输入你的extension APP name)</li></ol><p>这样控制台就可以断点调试 并 log相关信息了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以Broadcast Upload Extension为例。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 消息转发篇(Message Forwarding) (消息机制)</title>
    <link href="http://yoursite.com/2022/01/22/iOS-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E7%AF%87-Message-Forwarding-%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2022/01/22/iOS-消息转发篇-Message-Forwarding-消息机制/</id>
    <published>2022-01-22T07:49:40.000Z</published>
    <updated>2022-01-22T08:01:12.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OC的方法与消息"><a href="#OC的方法与消息" class="headerlink" title="OC的方法与消息"></a>OC的方法与消息</h2><a id="more"></a><ul><li><strong>方法</strong>：与一个类相关的一段实际代码，并给出一个特定的名字。</li><li><strong>消息</strong>：发送给对象的名称和一组参数。示例：向0x12345678对象发送meaning并且没有参数。</li><li><strong>选择器</strong>：表示消息或方法名称的一种特殊方式，表示为类型SEL。选择器本质上就是不透明的字符串，它们被管理，因此可以使用简单的指针相等来比较它们，从而提高速度。（实现可能会有所不同，但这基本上是他们在外部看起来的样子。）例如：@selector(meaning)</li><li><strong>消息发送</strong>：接收信息并查找和执行适当方法的过程。</li></ul><h2 id="方法与消息发送"><a href="#方法与消息发送" class="headerlink" title="方法与消息发送"></a>方法与消息发送</h2><p><strong>消息</strong>在OC中<strong>方法调用</strong>是一个<strong>消息发送</strong>的过程。OC方法最终被生成为C函数，并带有一些额外的参数。这个C函数objc_msgSend就负责<strong>消息发送。</strong></p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OBJC_EXPORT <span class="keyword">id</span> _Nullable</span><br><span class="line">objc_msgSendSuper(<span class="keyword">struct</span> objc_super * _Nonnull <span class="keyword">super</span>, SEL _Nonnull op, ...)</span><br><span class="line">    OBJC_AVAILABLE(<span class="number">10.0</span>, <span class="number">2.0</span>, <span class="number">9.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>);</span><br></pre></td></tr></table></figure><p>可以看到传入的是一个objc_super结构体,结构如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_super &#123;</span><br><span class="line">    <span class="comment">/// Specifies an instance of a class.</span></span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> _Nonnull <span class="keyword">id</span> receiver;</span><br><span class="line"></span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> _Nonnull Class super_class;</span><br><span class="line">    <span class="comment">/* super_class is the first class to search */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>receiver：消息接收者，是当前class<br>super_class ：父类，从父类开始寻找方法，而略过当前类<br>所以 调用[super xxxx] 并不是说父类来调用方法，只是从父类开始寻找方法，然后发送到当前class,最终作用对象,还是当前class 。</p><h2 id="消息发送的主要步骤"><a href="#消息发送的主要步骤" class="headerlink" title="消息发送的主要步骤"></a>消息发送的主要步骤</h2><ol><li>先在cache中查找imp,找到了返回imp</li><li><p>在当前class的method list中查找有无imp , 在class的方法列表methods中，根据SEL查找对应的imp</p></li><li><p>找到了 ,将imp存储到当前class 的cache中</p></li><li><p>在class的所有super classes中查找imp（先看Super class的cache，再看super class的方法列表）</p></li><li><p>找到了，同3</p></li><li><p>均未找到imp,进入动态方法解析流程resolveMethod</p><img src="/2022/01/22/iOS-消息转发篇-Message-Forwarding-消息机制/1.png"></li></ol><h2 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h2><p>没有方法的实现，程序会在运行时挂掉并抛出 unrecognized selector sent to … 的异常。但在异常抛出前，Objective-C 的运行时会给你三次拯救程序的机会：</p><ul><li>Method resolution</li><li>Fast forwarding</li><li>Normal forwarding</li></ul><h4 id="动态方法解析-Method-Resolution"><a href="#动态方法解析-Method-Resolution" class="headerlink" title="动态方法解析: Method Resolution"></a>动态方法解析: Method Resolution</h4><p>首先，Objective-C 运行时会调用以下方法，让你有机会提供一个函数实现。如果你添加了函数并返回 YES， 那运行时系统就会重新启动一次消息发送的过程。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;&#125; (实例方法)</span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)sel &#123;&#125;  (类方法)</span><br></pre></td></tr></table></figure><p>可以以下实现：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> eatMethod(<span class="keyword">id</span> obj, SEL _cmd)  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"eat..."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)aSEL</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(aSEL == <span class="keyword">@selector</span>(eat:))&#123;</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], aSEL, (IMP)eatMethod, <span class="string">"v@:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要在 resolveInstanceMethod: 方法中，利用 class_addMethod 方法，将未实现的 eatMethod：绑定到 eatMethod 上就能完成转发，最后返回 YES。</p><p>这里第一字符v代表函数返回类型void，第二个字符@代表self的类型id，第三个字符:代表_cmd的类型SEL。<a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100" target="_blank" rel="noopener">官方地址</a></p><img src="/2022/01/22/iOS-消息转发篇-Message-Forwarding-消息机制/2.png"><h4 id="快速转发-Fast-Rorwarding"><a href="#快速转发-Fast-Rorwarding" class="headerlink" title="快速转发: Fast Rorwarding"></a>快速转发: Fast Rorwarding</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;&#125;</span><br></pre></td></tr></table></figure><p>消息转发机制执行前，runtime系统允许我们替换消息的接收者为其他对象。通过上面方法。如果此方法返回的是nil 或者self,则会进入消息转发机制<code>（- (void)forwardInvocation:(NSInvocation *)invocation）</code>，否则将会向返回的对象重新发送消息。</p><p>相关实现</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="keyword">if</span>(aSelector == <span class="keyword">@selector</span>(eat:))&#123;</span><br><span class="line">        <span class="keyword">return</span> [[CatClass alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完整消息转发-Normal-Forwarding"><a href="#完整消息转发-Normal-Forwarding" class="headerlink" title="完整消息转发: Normal Forwarding"></a>完整消息转发: Normal Forwarding</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector &#123;&#125;</span><br><span class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation &#123;&#125;</span><br></pre></td></tr></table></figure><p>第一个要求返回一个方法签名，第二个方法转发具体的实现。二者相互依赖，只有返回了正确的方法签名，才会执行第二个方法。</p><p><code>forwardInvocation:</code>方法就是一个不能识别消息的分发中心，将这些不能识别的消息转发给不同的消息对象，或者转发给同一个对象，再或者将消息翻译成另外的消息，亦或者简单的处理掉某些消息，因此没有响应也不会报错。例如：我们可以为了避免直接闪退，可以当消息没法处理时在这个方法中给用户一个提示，也不失为一种友好的用户体验。</p><p>其中，参数<code>invocation</code>是从哪来的？在<code>forwardInvocation:</code>消息发送前，runtime系统会向对象发送<code>methodSignatureForSelector:</code>消息，并取到返回的方法签名用于生成<code>NSInvocation</code>对象。所以重写<code>forwardInvocation:</code>的同时也要重写<code>methodSignatureForSelector:</code>方法，否则会抛出异常。当一个对象由于没有相应的方法实现而无法响应某个消息时，运行时系统将通过<code>forwardInvocation:</code>消息通知该对象。每个对象都继承了<code>forwardInvocation:</code>方法，我们可以将消息转发给其它的对象。</p><p>相关实现：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line"><span class="meta">#pragma clang diagnostic push</span></span><br><span class="line"><span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-Wundeclared-selector"</span></span></span><br><span class="line"><span class="keyword">if</span> (aSelector == <span class="keyword">@selector</span>(eat:)) &#123;</span><br><span class="line"><span class="meta">#pragma clang diagnostic pop</span></span><br><span class="line"><span class="keyword">return</span> [<span class="built_in">NSMethodSignature</span>  signatureWithObjCTypes:<span class="string">"v@:@"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation &#123;</span><br><span class="line">Person *person = [Person new];</span><br><span class="line">Animal *animal = [Animal new];</span><br><span class="line"><span class="keyword">if</span> ([person respondsToSelector:anInvocation.selector]) &#123;</span><br><span class="line">[anInvocation invokeWithTarget:person];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ([animal respondsToSelector:anInvocation.selector]) &#123;</span><br><span class="line">[anInvocation invokeWithTarget:animal];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果三次都没有处理，就会抛出异常</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unrecognized selector sent to instance <span class="number">0x6d9f817072b1</span></span><br></pre></td></tr></table></figure><h2 id="模拟多继承"><a href="#模拟多继承" class="headerlink" title="模拟多继承"></a>模拟多继承</h2><p>转发和继承相似，可用于为OC编程添加一些多继承的效果，一个对象把消息转发出去，就好像他把另一个对象中放法接过来或者“继承”一样。消息转发弥补了objc不支持多继承的性质，也避免了因为多继承导致单个类变得臃肿复杂。</p><p>相关代码实现：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GDTMultipleDelegateProxy</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)share;</span><br><span class="line"><span class="comment">/// 把目标类添加到管理类里面</span></span><br><span class="line">- (<span class="keyword">void</span>)addTarget:(<span class="keyword">id</span>)target protocol:(<span class="keyword">id</span>)protocol;</span><br><span class="line"><span class="comment">/// 移除某个目标类</span></span><br><span class="line">- (<span class="keyword">void</span>)removeProtocol:(<span class="keyword">id</span>)protocol;</span><br><span class="line"><span class="comment">/// 移除所有目标类</span></span><br><span class="line">- (<span class="keyword">void</span>)removeAll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"GDTMultipleDelegateProxy.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/message.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GDTMultipleDelegateProxy</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *refTargets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GDTMultipleDelegateProxy</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> GDTMultipleDelegateProxy *manager = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)share &#123;</span><br><span class="line">    <span class="keyword">if</span> (!manager) &#123;</span><br><span class="line">        manager = [[GDTMultipleDelegateProxy alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> manager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addTarget:(<span class="keyword">id</span>)target protocol:(<span class="keyword">id</span>)protocol &#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.refTargets.allKeys containsObject:protocol]) &#123;</span><br><span class="line">        <span class="built_in">NSPointerArray</span> *targets = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</span><br><span class="line">        [targets addPointer:(__bridge <span class="keyword">void</span> * _Nullable)(target)];</span><br><span class="line">        [<span class="keyword">self</span>.refTargets setObject:targets forKey:protocol];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSPointerArray</span> *targets = [<span class="keyword">self</span>.refTargets objectForKey:protocol];</span><br><span class="line">        <span class="keyword">if</span> ([targets.allObjects containsObject:target]) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        [targets addPointer:(__bridge <span class="keyword">void</span> * _Nullable)(target)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 方法签名</span></span><br><span class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="built_in">NSMethodSignature</span> *sig = [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</span><br><span class="line">    <span class="keyword">if</span> (!sig) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> key <span class="keyword">in</span> <span class="keyword">self</span>.refTargets.allKeys) &#123;</span><br><span class="line">            <span class="built_in">NSPointerArray</span> *targets = [<span class="keyword">self</span>.refTargets objectForKey:key];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">id</span> obj <span class="keyword">in</span> targets) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sig = [obj methodSignatureForSelector:aSelector])) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 消息转发</span></span><br><span class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *key <span class="keyword">in</span> <span class="keyword">self</span>.refTargets.allKeys) &#123;</span><br><span class="line">        <span class="built_in">NSPointerArray</span> *targets = [<span class="keyword">self</span>.refTargets objectForKey:key];</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *name = [key UTF8String];</span><br><span class="line">        Protocol *protocol = objc_getProtocol(name);</span><br><span class="line">        <span class="built_in">NSAssert</span>(protocol!=<span class="literal">nil</span>, <span class="string">@"不存在的协议"</span>);</span><br><span class="line">        <span class="keyword">struct</span> objc_method_description protocol_method_description = protocol_getMethodDescription(protocol, anInvocation.selector, <span class="literal">NO</span>, <span class="literal">YES</span>);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"===%@==%s="</span>,<span class="built_in">NSStringFromSelector</span>(protocol_method_description.name),protocol_method_description.types);</span><br><span class="line">        <span class="keyword">if</span> (protocol_method_description.name != <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">id</span> obj <span class="keyword">in</span> targets) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([obj respondsToSelector:anInvocation.selector]) &#123;</span><br><span class="line">                    [anInvocation invokeWithTarget:obj];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeProtocol:(<span class="keyword">id</span>)protocol &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.refTargets.allKeys containsObject:protocol]) &#123;</span><br><span class="line">        [_refTargets removeObjectForKey:protocol];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeAll &#123;</span><br><span class="line">    [<span class="keyword">self</span>.refTargets removeAllObjects];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 判断目标类是否实现该协议</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)respondsToSelector:(SEL)aSelector &#123;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">super</span> respondsToSelector:aSelector]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> key <span class="keyword">in</span> <span class="keyword">self</span>.refTargets.allKeys) &#123;</span><br><span class="line">        <span class="built_in">NSPointerArray</span> *targets = [<span class="keyword">self</span>.refTargets objectForKey:key];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> obj <span class="keyword">in</span> targets) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([obj respondsToSelector:aSelector]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSMutableDictionary</span> *)refTargets &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_refTargets) &#123;</span><br><span class="line">        _refTargets = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _refTargets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (Class)getMeterClassObjc:(<span class="keyword">id</span>)objc &#123;</span><br><span class="line">    <span class="keyword">return</span> object_getClass(objc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给objc的deallocz转发一个新方法</span></span><br><span class="line">- (<span class="keyword">void</span>)cy_dealloc&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"=====%s===="</span>,__func__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> cy_dealloc(<span class="keyword">id</span> <span class="keyword">self</span> ,SEL _cmd)&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"====%s=%@="</span>,__func__,<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OC的方法与消息&quot;&gt;&lt;a href=&quot;#OC的方法与消息&quot; class=&quot;headerlink&quot; title=&quot;OC的方法与消息&quot;&gt;&lt;/a&gt;OC的方法与消息&lt;/h2&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS 15 适配手册</title>
    <link href="http://yoursite.com/2022/01/15/iOS-15-%E9%80%82%E9%85%8D%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2022/01/15/iOS-15-适配手册/</id>
    <published>2022-01-15T03:07:37.000Z</published>
    <updated>2022-02-09T06:41:51.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NavigationBar-颜色及背景失效"><a href="#NavigationBar-颜色及背景失效" class="headerlink" title="NavigationBar 颜色及背景失效"></a>NavigationBar 颜色及背景失效</h2><p>iOS 15上发现，指定的背景色失效了，但滚动控制器的视图时，导航条的背景又出现了。 </p><a id="more"></a><blockquote><p>As of iOS 15, UINavigationBar, UIToolbar, and UITabBar will use their scrollEdgeAppearance when your view controller’s associated scroll view is at the appropriate edge (or always if you don’t have a UIScrollView in your hierarchy, more on that below).<br>从 iOS 15 开始，UINavigationBar、UIToolbar 和 UITabBar 将在您的视图控制器的关联滚动视图位于适当的边缘时使用它们的 scrollEdgeAppearance（或者总是如果您的层次结构中没有 UIScrollView，更多内容见下文）。</p></blockquote><blockquote><p>You must adopt the UIBarAppearance APIs (available since iOS 13, specializations for each bar type) to customize this behavior. UIToolbar and UITabBar add scrollEdgeAppearance properties for this purpose in iOS 15.<br>您必须采用 UIBarAppearance API（自 iOS 13 起可用，针对每种条形类型进行了专门化）来自定义此行为。 UIToolbar 和 UITabBar 为此在 iOS 15 中添加了 scrollEdgeAppearance 属性。</p></blockquote><p>相关修改如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">        <span class="built_in">UINavigationBarAppearance</span> *appearance = [[<span class="keyword">self</span>.navigationBar standardAppearance] <span class="keyword">copy</span>];;</span><br><span class="line">        appearance.backgroundImage = [<span class="keyword">self</span> imageFromLayer:gradientLayer];</span><br><span class="line">        appearance.titleTextAttributes = @&#123;<span class="built_in">NSFontAttributeName</span>: [GDDConfig sharedInstance].defaultConfig.navTitleFont, <span class="built_in">NSForegroundColorAttributeName</span>: [GDDConfig sharedInstance].defaultConfig.navTitleColor&#125;;</span><br><span class="line">        <span class="keyword">self</span>.navigationBar.standardAppearance = appearance;</span><br><span class="line">        <span class="comment">/// 根据苹果的注释，如果scrollEdgeAppearance为nil，会默认使用standardAppearance啊。但在 iOS 15 中，必须同时指定standardAppearance和scrollEdgeAppearance才可以。</span></span><br><span class="line">        <span class="keyword">self</span>.navigationBar.scrollEdgeAppearance = appearance;</span><br><span class="line">        <span class="keyword">self</span>.navigationBar.tintColor = [GDDConfig sharedInstance].defaultConfig.navTitleColor;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.navigationBar.tintColor = [GDDConfig sharedInstance].defaultConfig.navTitleColor;</span><br><span class="line">        <span class="keyword">self</span>.navigationBar.titleTextAttributes = @&#123;<span class="built_in">NSFontAttributeName</span>: [GDDConfig sharedInstance].defaultConfig.navTitleFont, <span class="built_in">NSForegroundColorAttributeName</span>: [GDDConfig sharedInstance].defaultConfig.navTitleColor&#125;;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        [<span class="keyword">self</span>.navigationBar setBackgroundImage:[<span class="keyword">self</span> imageFromLayer:gradientLayer] forBarMetrics:<span class="built_in">UIBarMetricsDefault</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="UITabBar-背景图失效"><a href="#UITabBar-背景图失效" class="headerlink" title="UITabBar 背景图失效"></a>UITabBar 背景图失效</h2><p>UITabBar之前设置的背景图片，老版本可以，iOS 15上表现为空白。</p><p>新的API：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) <span class="built_in">UITabBarAppearance</span> *scrollEdgeAppearance; <span class="comment">//ios 15.0.</span></span><br></pre></td></tr></table></figure><p>相关代码修改如下：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *img = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"image"</span>];</span><br><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">    <span class="built_in">UITabBarAppearance</span> *appearance = [[tabBar standardAppearance] <span class="keyword">copy</span>];</span><br><span class="line">    appearance.backgroundImage = img;</span><br><span class="line">    appearance.backgroundImageContentMode = <span class="built_in">UIViewContentModeScaleToFill</span>;</span><br><span class="line">    <span class="keyword">self</span>.tabBar.standardAppearance = appearance;</span><br><span class="line">    <span class="keyword">if</span> (@available(iOS <span class="number">15.0</span>, *)) &#123;</span><br><span class="line">        <span class="keyword">self</span>.tabBar.scrollEdgeAppearance = appearance;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">    [<span class="keyword">self</span>.tabBar setBackgroundImage:[img imageWithRenderingMode:(<span class="built_in">UIImageRenderingModeAlwaysOriginal</span>)]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UITabBarItem-文字颜色失效"><a href="#UITabBarItem-文字颜色失效" class="headerlink" title="UITabBarItem 文字颜色失效"></a>UITabBarItem 文字颜色失效</h2><p>新版本中UITabBarItem文字颜色的修改不起作用。</p><p>兼容新的 API ：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readwrite</span>, <span class="keyword">copy</span>, <span class="keyword">nullable</span>) <span class="built_in">UITabBarAppearance</span> *scrollEdgeAppearance; <span class="comment">//ios 15.0.</span></span><br></pre></td></tr></table></figure><p>相关代码修改</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">13.0</span>, *)) &#123;</span><br><span class="line">        <span class="built_in">UITabBarAppearance</span> *appearance = [[<span class="keyword">self</span>.tabBar standardAppearance] <span class="keyword">copy</span>];</span><br><span class="line">        appearance.backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</span><br><span class="line">        <span class="built_in">UITabBarItemAppearance</span> *itemAppearance = [[<span class="built_in">UITabBarItemAppearance</span> alloc] init];</span><br><span class="line">        itemAppearance.selected.titleTextAttributes = @&#123;<span class="built_in">NSForegroundColorAttributeName</span>: [GDDConfig sharedInstance].defaultConfig.highlightColor&#125;;</span><br><span class="line">        appearance.stackedLayoutAppearance = itemAppearance;</span><br><span class="line">        <span class="keyword">self</span>.tabBar.standardAppearance = appearance;</span><br><span class="line">        <span class="keyword">if</span> (@available(iOS <span class="number">15.0</span>, *)) &#123;</span><br><span class="line">            <span class="keyword">self</span>.tabBar.scrollEdgeAppearance = appearance;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">        <span class="keyword">self</span>.tabBar.tintColor = [GDDConfig sharedInstance].defaultConfig.highlightColor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="UITableView"><a href="#UITableView" class="headerlink" title="UITableView"></a>UITableView</h2><p>iOS15 UITableView新增了一个新属性：sectionHeaderTopPadding，默认值为automaticDimension，此属性会给每一个 section header 增加一个默认高度，当我们使用UITableViewStylePlain 初始化tableView的时候，系统默认给 section header 增高了22像素。解决方案是调整sectionHeaderTopPadding属性设置，有需要隐藏头部设置为0即可：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">15.0</span>, *)) &#123;</span><br><span class="line">    <span class="keyword">self</span>.tableView.sectionHeaderTopPadding = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>## </p><h2 id="UIButton"><a href="#UIButton" class="headerlink" title="UIButton"></a>UIButton</h2><p>UIButton支持更多配置。UIButton.Configuration是一个新的结构体，它指定按钮及其内容的外观和行为。它有许多与按钮外观和内容相关的属性，如cornerStyle、baseForegroundColor、baseBackgroundColor、buttonSize、title、image、subtitle、titlePadding、imagePadding、contentInsets、imagePlacement等。</p><p>相关代码：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIButton</span> *button = [<span class="built_in">UIButton</span> buttonWithType:<span class="built_in">UIButtonTypeCustom</span>];</span><br><span class="line">button.backgroundColor = [<span class="built_in">UIColor</span> greenColor];</span><br><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">15.0</span>, *)) &#123;</span><br><span class="line">    <span class="built_in">UIButtonConfiguration</span> *conf = [<span class="built_in">UIButtonConfiguration</span> tintedButtonConfiguration];</span><br><span class="line">    conf.cornerStyle = <span class="built_in">UIButtonConfigurationCornerStyleMedium</span>;</span><br><span class="line">    [conf setImagePadding:<span class="number">5</span>];</span><br><span class="line">    [conf setTitle:<span class="string">@"大标题"</span>];</span><br><span class="line">    [conf setSubtitle:<span class="string">@"副标题"</span>];</span><br><span class="line">    [conf setImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"btnImage.png"</span>]];</span><br><span class="line">    conf.imagePlacement = <span class="built_in">NSDirectionalRectEdgeLeading</span>;</span><br><span class="line">    button.configuration = conf;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>## </p><h2 id="UIImage"><a href="#UIImage" class="headerlink" title="UIImage"></a>UIImage</h2><p>图片的尺寸变换,相关代码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UIImage</span> *modeImg = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"bgImage.png"</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"图片原尺寸%@"</span>, <span class="built_in">NSStringFromCGSize</span>(modeImg.size));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (@available(iOS <span class="number">15.0</span>, *)) &#123;</span><br><span class="line">    modeImg = [modeImg imageByPreparingThumbnailOfSize:<span class="built_in">CGSizeMake</span>(<span class="number">220</span>, <span class="number">100</span>)];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"1.变换后图片原尺寸%@"</span>,<span class="built_in">NSStringFromCGSize</span>(modeImg.size));</span><br><span class="line">    [modeImg prepareThumbnailOfSize:<span class="built_in">CGSizeMake</span>(<span class="number">220</span>, <span class="number">100</span>) completionHandler:^(<span class="built_in">UIImage</span> * _Nullable) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"2.变换后图片原尺寸%@"</span>,<span class="built_in">NSStringFromCGSize</span>(modeImg.size));</span><br><span class="line">    &#125;];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Fallback on earlier versions</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//打印值</span></span><br><span class="line"><span class="comment">//2021-12-15 15:48:17.590981+0800 iOS15UI[71637:683127] 图片原尺寸&#123;674, 206&#125;</span></span><br><span class="line"><span class="comment">//2021-12-15 15:48:17.598647+0800 iOS15UI[71637:683127] 1.变换后图片原尺寸&#123;220, 100&#125;</span></span><br><span class="line"><span class="comment">//2021-12-15 15:48:17.600537+0800 iOS15UI[71637:684293] 2.变换后图片原尺寸&#123;220, 100&#125;</span></span><br></pre></td></tr></table></figure><p>## </p><h2 id="UISheetPresentationController"><a href="#UISheetPresentationController" class="headerlink" title="UISheetPresentationController"></a>UISheetPresentationController</h2><p>增加UISheetPresentationController，通过它可以控制 Modal 出来的 UIViewController 的显示大小，且可以通过拖拽手势在不同大小之间进行切换。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> let presentationController = presentationController as? <span class="built_in">UISheetPresentationController</span> &#123;</span><br><span class="line">   <span class="comment">// 显示时支持的尺寸</span></span><br><span class="line">   presentationController.detents = [.medium(), .large()]</span><br><span class="line">   <span class="comment">// 显示一个指示器表示可以拖拽调整大小</span></span><br><span class="line">   presentationController.prefersGrabberVisible = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CLLocationButton"><a href="#CLLocationButton" class="headerlink" title="CLLocationButton"></a>CLLocationButton</h2><p>推出CLLocationButton用于一次性定位授权，该内容内置于CoreLocationUI模块，但如果需要获取定位的详细信息仍然需要借助于CoreLocation。</p><h2 id="URLSession"><a href="#URLSession" class="headerlink" title="URLSession"></a>URLSession</h2><p>URLSession 推出支持 async/await 的 API，包括获取数据、上传与下载</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NavigationBar-颜色及背景失效&quot;&gt;&lt;a href=&quot;#NavigationBar-颜色及背景失效&quot; class=&quot;headerlink&quot; title=&quot;NavigationBar 颜色及背景失效&quot;&gt;&lt;/a&gt;NavigationBar 颜色及背景失效&lt;/h2&gt;&lt;p&gt;iOS 15上发现，指定的背景色失效了，但滚动控制器的视图时，导航条的背景又出现了。 &lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS电话状态监听</title>
    <link href="http://yoursite.com/2022/01/06/iOS%E7%94%B5%E8%AF%9D%E7%8A%B6%E6%80%81%E7%9B%91%E5%90%AC/"/>
    <id>http://yoursite.com/2022/01/06/iOS电话状态监听/</id>
    <published>2022-01-06T01:56:12.000Z</published>
    <updated>2022-01-06T02:01:10.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、iOS10之前"><a href="#一、iOS10之前" class="headerlink" title="一、iOS10之前"></a>一、iOS10之前</h2><ol><li>导入头文件</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;CoreTelephony/CTCallCenter.h&gt;</span> </span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;CoreTelephony/CTCall.h&gt;</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>代码</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">CTCallCenter</span> *callCenter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">self</span>.callCenter = [[<span class="built_in">CTCallCenter</span> alloc] init];</span><br><span class="line"><span class="keyword">self</span>.callCenter.callEventHandler = ^(<span class="built_in">CTCall</span> * call) &#123;</span><br><span class="line">  <span class="keyword">if</span>([call.callState isEqualToString:<span class="built_in">CTCallStateDisconnected</span>]) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Call has been disconnected"</span>); <span class="comment">// 电话被挂断</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>([call.callState isEqualToString:<span class="built_in">CTCallStateConnected</span>] &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Call has been connected"</span>); <span class="comment">// 电话被接听</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>([call.callState isEqualToString:<span class="built_in">CTCallStateIncoming</span>]) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Call is incoming"</span>); <span class="comment">// 来电话了</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>([call.callState isEqualToString:<span class="built_in">CTCallStateDialing</span>]) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Call is Dialing"</span>); <span class="comment">// 拨号</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Nothing is done"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、iOS10之后"><a href="#二、iOS10之后" class="headerlink" title="二、iOS10之后"></a>二、iOS10之后</h2><p>iOS10及之后使用Callkit中的CXCallObserver和CXCall</p><ol><li>导入头文件</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;CallKit/CXCallObserver.h&gt;</span> </span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;CallKit/CXCall.h&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>代码</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) CXCallObserver *callObserver;</span><br><span class="line"><span class="comment">// 电话监听</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">self</span>.callObserver) &#123;</span><br><span class="line">    <span class="keyword">self</span>.callObserver = [[CXCallObserver alloc] init];</span><br><span class="line">    [<span class="keyword">self</span>.callObserver setDelegate:<span class="keyword">self</span> queue:dispatch_get_main_queue()];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#pragma mark - 电话的监听</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)callObserver:(CXCallObserver *)callObserver callChanged:(CXCall *)call &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"call observer uuid: %@"</span>, call.UUID);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"outgoing(拨打) :%d  onHold(待接通) :%d   hasConnected(接通) :%d   hasEnded(挂断) :%d"</span>,call.outgoing,call.onHold,call.hasConnected,call.hasEnded);</span><br><span class="line">    <span class="comment">/* 挂断    outgoing(拨打) :0  onHold(待接通) :0   hasConnected(接通) :0   hasEnded(挂断) :1</span></span><br><span class="line"><span class="comment">    拨打    outgoing(拨打) :1  onHold(待接通) :0   hasConnected(接通) :0   hasEnded(挂断) :0  (拨打)</span></span><br><span class="line"><span class="comment">    outgoing(拨打) :1  onHold(待接通) :0   hasConnected(接通) :0   hasEnded(挂断) :1  (拨打 - 挂断)</span></span><br><span class="line"><span class="comment">    outgoing(拨打) :1  onHold(待接通) :0   hasConnected(接通) :1   hasEnded(挂断) :0  (拨打 - 接通)</span></span><br><span class="line"><span class="comment">    outgoing(拨打) :1  onHold(待接通) :0   hasConnected(接通) :1   hasEnded(挂断) :1  (拨打 - 接通 - 挂断)</span></span><br><span class="line"><span class="comment">    接通    outgoing(拨打) :0  onHold(待接通) :0   hasConnected(接通) :1   hasEnded(挂断) :0  (接通)</span></span><br><span class="line"><span class="comment">    outgoing(拨打) :0  onHold(待接通) :0   hasConnected(接通) :1   hasEnded(挂断) :1  (接通 - 挂断)*/</span></span><br><span class="line">    <span class="keyword">if</span> (call.hasConnected) &#123;</span><br><span class="line">        <span class="comment">/// 接通了电话</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (call.hasEnded) &#123;</span><br><span class="line">        <span class="comment">// 挂断</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、iOS10之前&quot;&gt;&lt;a href=&quot;#一、iOS10之前&quot; class=&quot;headerlink&quot; title=&quot;一、iOS10之前&quot;&gt;&lt;/a&gt;一、iOS10之前&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;导入头文件&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;CoreTelephony/CTCallCenter.h&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;CoreTelephony/CTCall.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS封装SDK(分别生成.a和framework)</title>
    <link href="http://yoursite.com/2021/11/26/iOS%E5%B0%81%E8%A3%85SDK-%E5%88%86%E5%88%AB%E7%94%9F%E6%88%90-a%E5%92%8Cframework/"/>
    <id>http://yoursite.com/2021/11/26/iOS封装SDK-分别生成-a和framework/</id>
    <published>2021-11-26T03:39:37.000Z</published>
    <updated>2022-02-09T06:42:56.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、库的介绍"><a href="#一、库的介绍" class="headerlink" title="一、库的介绍"></a>一、库的介绍</h2><a id="more"></a><ol><li><p>什么是库？<br>库(Library)说白了就是一段编译好的二进制代码，加上头文件就可以供别人使用</p></li><li><p>根据源代码的公开情况，库可以分为两种类型<br>a.开源库：公开源代码，能看到具体实现，比如SDWebImage、AFNetworking</p><p> b.闭源库：不公开源代码，是经过编译后的二进制文件，看不到具体实现，主.  要分为静态库、动态库</p><blockquote><p>什么时候我们会用到库呢？</p><p>一种情况是某些代码需要给别人使用，但是我们不希望别人看到源码，就需要以库的形式进行封装，只暴露出头文件。 (一些引入的第三方库)</p><p>对于某些不会进行大的改动的代码，我们想减少编译的时间，就可以把它打包成库，因为库是已经编译好的二进制了，编译的时候只需要 Link 一下，不会浪费编译时间。 (一些比较稳定的工具类，或者很稳定的功能模块)</p></blockquote></li><li><p>静态库</p><p>静态库 (静态链接库) 以.a 和 .framework 结尾 。 只所以叫静态库在编译的时候会被直接拷贝一份，复制到目标程序里，这段代码在程序里就不会在改变</p><blockquote><p>优点：编译完成之后，库文件没有作用了，目标没有外部依赖，直接可以运行缺点： 链接时，静态库会被完整的复制到可执行文件中，被多次使用就有多份冗余拷贝，会使目标体积增大</p></blockquote></li><li><p>动态库</p><p> 动态库(动态链接库) 以 .dylib 或者 .framework 后缀结尾 与静态库相反，动态库在编译时并不会被拷贝到目标程序中，目标程序中只会存储指向动态库的引用。等到程序运行时，动态库才会被真正加载进来。</p><blockquote><p>优点：不会影响目标程序的体积，而且同一份库可以被多个程序使用（因为这个原因，动态库也被称作共享库）。同时，运行时才载入的特性，也可以让我们随时对库进行替换，而不需要重新编译代码。</p><p>缺点： 动态载入会带来一部分性能损失，使用动态库也会使得程序依赖于外部环境。如果环境缺少动态库或者库的版本不正确，就会导致程序无法运行。（Linux lib not found 错误）</p></blockquote></li></ol><p><strong>注意：</strong></p><p>由于iOS8之后才允许使用插入动态库，所以网上大部分教程在选MachO-Type的时候选择的是Static Library。但是.a静态库和静态framework无法访问库中的资源图片的。所以自己创建的framework如果想访问库中的资源文件，那么必须要是动态库。</p><p>自建动态库手动拖入的工程后，必须选择embed选项，否则的话，启动即崩溃</p><p>相关链接🔗：<a href="https://www.jianshu.com/p/4e0fd0214152" target="_blank" rel="noopener">iOS动态库、静态库及使用场景、方式</a></p><h2 id="二、生成-framework"><a href="#二、生成-framework" class="headerlink" title="二、生成.framework"></a>二、生成.framework</h2><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/1.png" title="截图1"><ol><li><p>打开Xcode，新建工程，命名GJJDateToolSDK</p></li><li><p>设置参数</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/2.png" title="截图2"><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/3.png" title="截图3"><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/4.png" title="截图4"></li></ol><p>📢</p><ul><li><p>Dead Code stripping</p><p> Xcode 默认会开启此选项，C/C++/Swift 等静态语言编译器会在 link 的时候移除未使用的代码，但是对于 Objective-C 等动态语言是无效的。因为       Objective-C 是建立在运行时上面的，底层暴露给编译器的都是 Runtime 源码编译结果，所有的部分应该都是会被判别为有效代码。</p></li><li><p>Link With Standard Libraries</p></li></ul><p>​      设置NO，避免重复链接</p><ul><li>arm64等CUP架构说明看<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdocs.elementscompiler.com%2FPlatforms%2FCocoa%2FCpuArchitectures%2F" target="_blank" rel="noopener">CPU架构说明</a></li></ul><ol start="3"><li><p>系统默认会创建该文件，作用相当于项目中统一管理头文件的那个文件</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/5.png" title="截图5"></li><li><p>新建文件，在GJJDateToolSDK.h中引入头文件。</p></li><li><p>在Build Phase进行如下配置，把公开文件放到Public下边，把需要隐藏的放到private下边。</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/6.png" title="截图6"></li><li><p>继续进行如下配置</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/7.png" title="截图7"></li><li><p>打包Framework。选中模拟器command + b，选中真机command + b。</p></li><li><p>查看编译好之后的framework</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/8.png" title="截图8"><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/9.png" title="截图9"></li><li><p>合并真机与模拟器编译后的framework文件通过lipo -create 命令合并</p><blockquote><p>相关命令：lipo -create + 模拟器编译后的framework中的GJJDateToolSDK +  真机编译后的framework中的GJJDateToolSDK + -output + 合并后的要保存的路径</p></blockquote><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/10.png" title="截图10"><blockquote><p>注意：合并模拟器编译后的静态库与真机编译后的静态库报错<code>have the same architectures (arm64) and can&#39;t be in the same fat output file</code> 查看步骤2设置参数是否添加Build Setting –&gt; Excluded Architectures –&gt; Release –&gt; 添加上 arm64</p></blockquote></li><li><p>导出文件</p><p>将合并后的文件拖入到真机编译后的文件中进行替换，然后将整个GJJDateToolSDK.framework拷贝出，添加到项目中。至此制作完毕一个适用于真机与模拟器的framework静态库制作完毕。</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/11.png" title="截图11"></li></ol><h2 id="三、生成-a"><a href="#三、生成-a" class="headerlink" title="三、生成.a"></a>三、生成.a</h2><ol><li><p>新建工程，以GJJDateToolSDK为例</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/12.png" title="截图12"></li><li><p>配置参数</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/13.png" title="截图13"><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/14.png" title="截图14"></li><li><p>创建bundle文件,名字一般与工程名相同(如果静态库有资源文件要使用，必须放入.bundle文件)</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/15.png" title="截图15"></li><li><p>写代码</p></li><li><p>将头文件公开</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/16.png" title="截图16"><blockquote><p>注意：如果头文件过多，可以新建一个.h文件统一引入，避免引用SDK的时候，需要导入过多.h文件</p></blockquote></li><li><p>打包.a文件</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/17.png" title="截图17"><p>选择模拟器和真机，分别进行command+b</p></li><li><p>合并真机与模拟器编译后的.a文件通过lipo -create 命令合并</p><img src="/2021/11/26/iOS封装SDK-分别生成-a和framework/18.png" title="截图18"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、库的介绍&quot;&gt;&lt;a href=&quot;#一、库的介绍&quot; class=&quot;headerlink&quot; title=&quot;一、库的介绍&quot;&gt;&lt;/a&gt;一、库的介绍&lt;/h2&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>解决webview全屏播放视频</title>
    <link href="http://yoursite.com/2021/11/24/%E8%A7%A3%E5%86%B3webview%E5%85%A8%E5%B1%8F%E6%92%AD%E6%94%BE%E8%A7%86%E9%A2%91/"/>
    <id>http://yoursite.com/2021/11/24/解决webview全屏播放视频/</id>
    <published>2021-11-24T08:41:18.000Z</published>
    <updated>2022-02-09T06:40:56.300Z</updated>
    
    <content type="html"><![CDATA[<p>问题背景：webview使用内部播放器播放视频，不是有iPhone默认播放器播放<br>allowsInlineMediaPlayback指示HTML5视频是否内联播放(YES)或使用本机全屏控制器(NO)。默认值为NO。</p><a id="more"></a><p><code>WKWebViewConfiguration *config = [[WKWebViewConfiguration alloc] init];</code><br><code>config.allowsInlineMediaPlayback = YES;</code><br><code>_webView= [[DWKWebView alloc] initWithFrame:CGRectZero configuration:config];</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;问题背景：webview使用内部播放器播放视频，不是有iPhone默认播放器播放&lt;br&gt;allowsInlineMediaPlayback指示HTML5视频是否内联播放(YES)或使用本机全屏控制器(NO)。默认值为NO。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>常用hexo命令</title>
    <link href="http://yoursite.com/2021/11/24/%E5%B8%B8%E7%94%A8hexo%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2021/11/24/常用hexo命令/</id>
    <published>2021-11-24T08:28:10.000Z</published>
    <updated>2021-11-24T08:35:52.424Z</updated>
    
    <content type="html"><![CDATA[<p>常见命令</p><a id="more"></a><p><code>hexo new &quot;postName&quot; #新建文章</code><br><code>hexo new page &quot;pageName&quot; #新建页面</code><br><code>hexo generate #生成静态页面至public目录</code><br><code>hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server）</code><br><code>hexo deploy #部署到GitHub</code><br><code>hexo help  # 查看帮助</code><br><code>hexo version  #查看Hexo的版本</code></p><p>缩写：</p><p><code>hexo n == hexo new</code><br><code>hexo g == hexo generate</code><br><code>hexo s == hexo server</code><br><code>hexo d == hexo deploy</code></p><p>组合命令：</p><p><code>hexo s -g #生成并本地预览</code><br><code>hexo d -g #生成并上传</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见命令&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Xcode 13新建项目Products目录显示方法</title>
    <link href="http://yoursite.com/2021/11/24/Xcode-13%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AEProducts%E7%9B%AE%E5%BD%95%E6%98%BE%E7%A4%BA%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2021/11/24/Xcode-13新建项目Products目录显示方法/</id>
    <published>2021-11-24T05:36:37.000Z</published>
    <updated>2021-11-24T08:24:02.544Z</updated>
    
    <content type="html"><![CDATA[<p>首先打开项目，进入到项目目录找到xxx.xcodeproj文件显示包内容，找到project.pbxproj打开，搜索productRefGroup，</p><p>搜索结果可能有多个，每个项目的键值不一样具体看自己的<br>注意看<code>productRefGroup</code>的注释 为<code>/* Products */</code> 才是我们要修改的</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mainGroup = 2010E124274DE36A00A796DF;</span><br><span class="line">productRefGroup = 2010E12F274DE36A00A796DF /* Products */;</span><br></pre></td></tr></table></figure><p>将上面 <code>mainGroup</code> 对应的值复制给 <code>productRefGroup</code> 的值 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mainGroup = 2010E124274DE36A00A796DF;</span><br><span class="line">productRefGroup = 2010E124274DE36A00A796DF /* Products */;</span><br></pre></td></tr></table></figure><p>最后按 <code>command+s</code> 保存 <code>project.pbxproj</code> 文件,Xcode将自动刷新<br>这时候你想见的 <code>Products</code> 目录就出现了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先打开项目，进入到项目目录找到xxx.xcodeproj文件显示包内容，找到project.pbxproj打开，搜索productRefGroup，&lt;/p&gt;
&lt;p&gt;搜索结果可能有多个，每个项目的键值不一样具体看自己的&lt;br&gt;注意看&lt;code&gt;productRefGroup&lt;/code&gt;的注释 为&lt;code&gt;/* Products */&lt;/code&gt; 才是我们要修改的&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS上搭建Flutter开发环境</title>
    <link href="http://yoursite.com/2019/09/18/macOS%E4%B8%8A%E6%90%AD%E5%BB%BAFlutter%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2019/09/18/macOS上搭建Flutter开发环境/</id>
    <published>2019-09-18T06:08:36.000Z</published>
    <updated>2022-02-09T06:44:10.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>要安装并运行Flutter，您的开发环境必须满足以下最低要求:</p><ul><li>操作系统: macOS (64-bit)</li><li>磁盘空间: 700 MB (不包括Xcode或Android Studio的磁盘空间）.</li><li>工具: Flutter 依赖下面这些命令行工具.</li><li>bash、mkdir、rm、git、curl、unzip、which</li></ul><a id="more"></a><h2 id="获取Flutter-SDK"><a href="#获取Flutter-SDK" class="headerlink" title="获取Flutter SDK"></a>获取Flutter SDK</h2><ol><li><p>去flutter官网下载其最新可用的安装包，官网地址：<a href="https://flutter.io/sdk-archive/#macos" target="_blank" rel="noopener">https://flutter.io/sdk-archive/#macos</a>。<br>注意，Flutter的渠道版本会不停变动，请以Flutter官网为准。另外，在中国大陆地区，要想正常获取安装包列表或下载安装包，可能需要翻墙，可以去Flutter github项目下去下载安装包，地址：<a href="https://github.com/flutter/flutter/releases" target="_blank" rel="noopener">https://github.com/flutter/flutter/releases</a> 。</p></li><li><p>解压安装包到你想安装的目录<br>直接解压放到你想安装的目录就可以。或者使用命令行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/development</span><br><span class="line">unzip ~/Downloads/flutter_macos_v0.5.1-beta.zip</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p></li></ol><ul><li><p>打开终端工具，使用vim进行配置环境变量，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>然后在终端添加以下三行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn # 国内用户需要设置</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn # 国内用户需要设置</span><br><span class="line">export PATH=/Users/sheffi/flutter/bin:$PATH</span><br></pre></td></tr></table></figure></li></ul><img src="/2019/09/18/macOS上搭建Flutter开发环境/截图1.png" title="截图1"><ul><li><p>配置完成后，需要用source命令重新加载一下 ，具体命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure></li><li><p>完成这些步骤后，可以使用命令进行检测一下，是否安装成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter -h</span><br></pre></td></tr></table></figure></li><li><p>如图，说明一切安装顺利</p><img src="/2019/09/18/macOS上搭建Flutter开发环境/截图2.png" title="截图2"></li></ul><ol start="4"><li>检查开发环境</li></ol><ul><li><p>到这我们已经安装好了flutter，但是还不具备开发环境。开发还需要很多软件和插件的支持，那到底需要哪些插件和软件那？我们可以使用Flutter为我们提供的命令来进行检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure></li><li><p>因为我所有的东西都安装完，显示如下</p><img src="/2019/09/18/macOS上搭建Flutter开发环境/截图3.png" title="截图3"></li><li>第一次安装根据终端的提示进行安装相应的软件和插件。</li></ul><h2 id="安装-Xcode"><a href="#安装-Xcode" class="headerlink" title="安装 Xcode"></a>安装 Xcode</h2><p> 要为iOS开发Flutter应用程序，您需要Xcode 9.0或更高版本:</p><ul><li>安装Xcode 9.0或更新版本(通过链接下载或苹果应用商店).</li><li>配置Xcode命令行工具以使用新安装的Xcode版本 sudo xcode-select –switch /Applications/Xcode.app/Contents/Developer 对于大多数情况，当您想要使用最新版本的Xcode时，这是正确的路径。如果您需要使用不同的版本，请指定相应路径。</li><li>确保Xcode许可协议是通过打开一次Xcode或通过命令sudo xcodebuild -license同意过了.</li><li>使用Xcode，您可以在iOS设备或模拟器上运行Flutter应用程序。</li></ul><h2 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h2><p>要在Android设备上构建并运行Flutter程序都需要先安装Android Studio，可以先自行下载并安装Android Studio，在此不再赘述。</p><p>Android Studio 配置与使用</p><p>a. 需要安装两个插件:</p><ul><li>Flutter插件： 支持Flutter开发工作流 (运行、调试、热重载等)。</li><li>Dart插件： 提供代码分析 (输入代码时进行验证、代码补全等)。</li></ul><p>b. 安装步骤：</p><ul><li>启动Android Studio。</li><li>打开插件首选项 (macOS：Preferences&gt;Plugins, Windows：File&gt;Settings&gt;Plugins)。</li><li>选择 Browse repositories…，选择 flutter 插件并点击 install。</li><li>重启Android Studio后插件生效。</li></ul><p>c. 创建Flutter应用</p><ul><li>选择 File&gt;New Flutter Project 。</li><li>选择 Flutter application 作为 project 类型, 然后点击 Next。</li><li>输入项目名称 (如 myapp)，然后点击 Next。</li><li>点击 Finish。</li><li>等待Android Studio安装SDK并创建项目。</li></ul><p>d. 运行应用程序</p><ul><li>定位到Android Studio工具栏<img src="/2019/09/18/macOS上搭建Flutter开发环境/截图4.png" title="截图4"></li><li>在 target selector 中, 选择一个运行该应用的Android设备。如果没有列出可用，请选择 Tools&gt;AVD Manager 并在那里创建一个。</li><li>在工具栏中点击 Run图标</li><li>如果一切正常, 您应该在您的设备或模拟器上会看到启动的应用程序：<img src="/2019/09/18/macOS上搭建Flutter开发环境/截图5.png" title="截图5"></li></ul><p><strong>VS Code的配置与使用</strong><br>VS Code是一个轻量级编辑器，支持Flutter运行和调试。</p><p>a. 安装flutter插件</p><ul><li>启动 VS Code。</li><li>调用 View&gt;Command Palette…。</li><li>输入 ‘install’, 然后选择 Extensions: Install Extension action。</li><li>在搜索框输入 flutter ，在搜索结果列表中选择 ‘Flutter’, 然后点击 Install。</li><li>选择 ‘OK’ 重新启动 VS Code。<br>b. 验证配置</li><li>调用 View&gt;Command Palette…</li><li>输入 ‘doctor’, 然后选择 ‘Flutter: Run Flutter Doctor’ action。</li><li>查看“OUTPUT”窗口中的输出是否有问题<br>c. 创建Flutter应用</li><li>启动 VS Code</li><li>调用 View&gt;Command Palette…</li><li>输入 ‘flutter’, 然后选择 ‘Flutter: New Project’ action</li><li>输入 Project 名称 (如myapp), 然后按回车键</li><li>指定放置项目的位置，然后按蓝色的确定按钮</li><li>等待项目创建继续，并显示main.dart文件</li></ul><p>最后附上学习链接：<a href="https://flutterchina.club" target="_blank" rel="noopener">Flutter中文网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;系统要求&quot;&gt;&lt;a href=&quot;#系统要求&quot; class=&quot;headerlink&quot; title=&quot;系统要求&quot;&gt;&lt;/a&gt;系统要求&lt;/h2&gt;&lt;p&gt;要安装并运行Flutter，您的开发环境必须满足以下最低要求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统: macOS (64-bit)&lt;/li&gt;
&lt;li&gt;磁盘空间: 700 MB (不包括Xcode或Android Studio的磁盘空间）.&lt;/li&gt;
&lt;li&gt;工具: Flutter 依赖下面这些命令行工具.&lt;/li&gt;
&lt;li&gt;bash、mkdir、rm、git、curl、unzip、which&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://yoursite.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>十七款PDF在线转换器</title>
    <link href="http://yoursite.com/2019/09/10/%E5%8D%81%E4%B8%83%E6%AC%BEPDF%E5%9C%A8%E7%BA%BF%E8%BD%AC%E6%8D%A2%E5%99%A8/"/>
    <id>http://yoursite.com/2019/09/10/十七款PDF在线转换器/</id>
    <published>2019-09-10T03:17:17.000Z</published>
    <updated>2022-02-09T06:42:04.459Z</updated>
    
    <content type="html"><![CDATA[<p>目前最全合集，收藏备用。</p><a id="more"></a><p>1、smallPDF：<a href="https://smallpdf.com/" target="_blank" rel="noopener">https://smallpdf.com/</a><br>2、Online OCR：<a href="https://www.onlineocr.net/" target="_blank" rel="noopener">https://www.onlineocr.net/</a><br>3、PDF to Word Converter：<a href="https://www.pdftoword.com/" target="_blank" rel="noopener">https://www.pdftoword.com/</a><br>4、加加PDF：<a href="https://www.addpdf.cn/pdf-to-word" target="_blank" rel="noopener">https://www.addpdf.cn/pdf-to-word</a><br>5、ilovePDF：<a href="https://www.ilovepdf.com/" target="_blank" rel="noopener">https://www.ilovepdf.com/</a><br>6、PDFconverter：<a href="https://www.pdfconverter.com" target="_blank" rel="noopener">https://www.pdfconverter.com</a><br>7、PDFbao：<a href="http://www.pdfbao.com/" target="_blank" rel="noopener">http://www.pdfbao.com/</a><br>8、PDF转换器：<a href="http://www.pdfdo.com/" target="_blank" rel="noopener">http://www.pdfdo.com/</a><br>9、cloudconvert：<a href="https://cloudconvert.com/pdf-to-doc" target="_blank" rel="noopener">https://cloudconvert.com/pdf-to-doc</a><br>10、迅捷PDF转换器：<a href="https://app.xunjiepdf.com/" target="_blank" rel="noopener">https://app.xunjiepdf.com/</a><br>11、ApowerPDF）：<a href="https://www.apowersoft.cn/pdf-editor" target="_blank" rel="noopener">https://www.apowersoft.cn/pdf-editor</a><br>12、PDF2go：<a href="https://www.pdf2go.com/zh/" target="_blank" rel="noopener">https://www.pdf2go.com/zh/</a><br>13、ABBYY FineReader：<a href="http://ocr.abbyy.cn/" target="_blank" rel="noopener">http://ocr.abbyy.cn/</a><br>14、PDF.IO：<a href="https://pdf.io/tw/" target="_blank" rel="noopener">https://pdf.io/tw/</a><br>15、PDFtodoc：<a href="http://pdf2doc.com/zh/" target="_blank" rel="noopener">http://pdf2doc.com/zh/</a><br>16、pdfcandy：<a href="https://pdfcandy.com/" target="_blank" rel="noopener">https://pdfcandy.com/</a><br>17、Docs.Zone：<a href="https://docs.zone/" target="_blank" rel="noopener">https://docs.zone/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前最全合集，收藏备用。&lt;/p&gt;
    
    </summary>
    
      <category term="PDF" scheme="http://yoursite.com/categories/PDF/"/>
    
    
  </entry>
  
  <entry>
    <title>[译] 成为一个优秀程序员的101个小建议</title>
    <link href="http://yoursite.com/2019/08/29/%E8%AF%91-%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%BC%98%E7%A7%80%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84101%E4%B8%AA%E5%B0%8F%E5%BB%BA%E8%AE%AE/"/>
    <id>http://yoursite.com/2019/08/29/译-成为一个优秀程序员的101个小建议/</id>
    <published>2019-08-29T01:26:09.000Z</published>
    <updated>2022-02-09T06:41:59.842Z</updated>
    
    <content type="html"><![CDATA[<p><strong>原文作者：</strong><a href="https://dev.to/emmawedekind" target="_blank" rel="noopener">Emma Wedekind</a></p><p><strong>原文链接：</strong><a href="https://dev.to/emmawedekind/101-tips-for-being-a-great-programmer-human-36nl" target="_blank" rel="noopener">dev.to/emmawedekin…</a></p><a id="more"></a><h2 id="1-善用google⭐"><a href="#1-善用google⭐" class="headerlink" title="1. 善用google⭐"></a>1. 善用google⭐</h2><p>作为一名程序员，你要知道如何搜索问题的答案。学会有效的使用google，你将节省大量开发时间。<br><em>注：国内程序员还是要遵守规则的情况下跨过那道墙看看</em></p><h2 id="2-谨慎承诺超额交付⭐"><a href="#2-谨慎承诺超额交付⭐" class="headerlink" title="2. 谨慎承诺超额交付⭐"></a>2. 谨慎承诺超额交付⭐</h2><p>让你的团队知道一项任务需要三周的时间，并在两周内完成，这比让他们知道相反的情况要好。通过谨慎承诺和超额交付，你会建立信任。</p><img src="/2019/08/29/译-成为一个优秀程序员的101个小建议/a1.png" title="a1"><!--more--><h2 id="3-善待产品设计人员，他们是你的朋友"><a href="#3-善待产品设计人员，他们是你的朋友" class="headerlink" title="3. 善待产品设计人员，他们是你的朋友"></a>3. 善待产品设计人员，他们是你的朋友</h2><p>产品设计人员为用户的痛点提供解决方案。向他们学习，团结一致地构建有效的产品。</p><h2 id="4-找到一名导师"><a href="#4-找到一名导师" class="headerlink" title="4. 找到一名导师"></a>4. 找到一名导师</h2><p>找到一个可以学习和借鉴的人。如果你需要技术指导，Coding Coach会是一个不错的地方。</p><h2 id="5-成为一名导师"><a href="#5-成为一名导师" class="headerlink" title="5. 成为一名导师"></a>5. 成为一名导师</h2><p>做一个别人可以学习和借鉴的人。你可以尝试在Coding Coach成为别人的导师。<br>这个网站并不是很了解，请自行斟酌。国内厉害的程序员也很多，掘金，知乎上找也可以。</p><h2 id="6-写些有用的评论"><a href="#6-写些有用的评论" class="headerlink" title="6. 写些有用的评论"></a>6. 写些有用的评论</h2><p>写下有用的回答而不是问为什么，mark和灌水也没什么意思。</p><h2 id="7-合理的命名变量和函数名"><a href="#7-合理的命名变量和函数名" class="headerlink" title="7. 合理的命名变量和函数名"></a>7. 合理的命名变量和函数名</h2><p>函数和变量应该准确地表示它们的用途，因此myCoolFunction不是一个好名字。</p><h2 id="8-给自己放个假"><a href="#8-给自己放个假" class="headerlink" title="8. 给自己放个假"></a>8. 给自己放个假</h2><p>我们都需要时间来缓解压力。去一个你一直想去的地方放个假。你的大脑和同事都会感谢你的。</p><h2 id="9-删除无用代码⭐"><a href="#9-删除无用代码⭐" class="headerlink" title="9. 删除无用代码⭐"></a>9. 删除无用代码⭐</h2><p>没有理由积累更多技术债务。</p><h2 id="10-学会阅读代码⭐"><a href="#10-学会阅读代码⭐" class="headerlink" title="10. 学会阅读代码⭐"></a>10. 学会阅读代码⭐</h2><p>阅读代码是一项非常宝贵的被低估的技能。</p><h2 id="11-找到健康工作和生活平衡点"><a href="#11-找到健康工作和生活平衡点" class="headerlink" title="11. 找到健康工作和生活平衡点"></a>11. 找到健康工作和生活平衡点</h2><p>结束一周的工作之后，周末放松一下。关闭工作通知，删除手机上的应用程序。</p><img src="/2019/08/29/译-成为一个优秀程序员的101个小建议/a2.png" title="a2"><h2 id="12-只安排必要的会议"><a href="#12-只安排必要的会议" class="headerlink" title="12. 只安排必要的会议"></a>12. 只安排必要的会议</h2><p>能用邮件解决的就没必要开会，如果非要开，也应该让会议简短高效。</p><h2 id="13-结对编程"><a href="#13-结对编程" class="headerlink" title="13. 结对编程"></a>13. 结对编程</h2><p>结对编程可以让你同时扮演老师和学生的角色。</p><h2 id="14-写好邮件"><a href="#14-写好邮件" class="headerlink" title="14. 写好邮件"></a>14. 写好邮件</h2><p>邮件的内容应该简洁而清晰，抓住重点。没人会想看你的四页邮件，兄弟。</p><h2 id="15-加入社区⭐"><a href="#15-加入社区⭐" class="headerlink" title="15. 加入社区⭐"></a>15. 加入社区⭐</h2><p>和志同道合的人在一起会激励你走出低谷。</p><img src="/2019/08/29/译-成为一个优秀程序员的101个小建议/a3.png" title="a3"><h2 id="16-清理你的分支⭐"><a href="#16-清理你的分支⭐" class="headerlink" title="16. 清理你的分支⭐"></a>16. 清理你的分支⭐</h2><p>清理你的版本控制分支，就像在你的岳父母来访之前清理你的房子一样。如果你不再需要，请删掉它，不删留着过年啊。</p><h2 id="17-接纳萌新"><a href="#17-接纳萌新" class="headerlink" title="17. 接纳萌新"></a>17. 接纳萌新</h2><p>包容点，不要告诉别人不够好，不能进入这个行业。每个人都是有价值。</p><h2 id="18-活到老学到老"><a href="#18-活到老学到老" class="headerlink" title="18. 活到老学到老"></a>18. 活到老学到老</h2><p>你选择了一个需要不断学习的职业，学会爱上它。</p><h2 id="19-永不言弃"><a href="#19-永不言弃" class="headerlink" title="19. 永不言弃"></a>19. 永不言弃</h2><p>这并不容易，但是我们都是从同一个地方开始，你也能做到。</p><h2 id="20-敢于接受有挑战性的任务⭐"><a href="#20-敢于接受有挑战性的任务⭐" class="headerlink" title="20. 敢于接受有挑战性的任务⭐"></a>20. 敢于接受有挑战性的任务⭐</h2><p>如果任务没有挑战，它就不会帮助你成长。</p><h2 id="21-项目开始前明确需求⭐"><a href="#21-项目开始前明确需求⭐" class="headerlink" title="21. 项目开始前明确需求⭐"></a>21. 项目开始前明确需求⭐</h2><p>在开撸之前，你应该了解验收标准，这将为你节省时间和痛苦。</p><img src="/2019/08/29/译-成为一个优秀程序员的101个小建议/a4.png" title="a4"><h2 id="22-工欲善其事，必先利其器⭐"><a href="#22-工欲善其事，必先利其器⭐" class="headerlink" title="22. 工欲善其事，必先利其器⭐"></a>22. 工欲善其事，必先利其器⭐</h2><p>拥有一套你熟悉的工具，了解哪些工具服务于哪些目的，以及项目何时可以从使用这些工具中获益。</p><h2 id="23-我们需要建设性的批评"><a href="#23-我们需要建设性的批评" class="headerlink" title="23. 我们需要建设性的批评"></a>23. 我们需要建设性的批评</h2><p>向信任的同事和朋友寻求建设性的批评，它将帮助你更优秀。</p><h2 id="24-保持开放思维⭐"><a href="#24-保持开放思维⭐" class="headerlink" title="24. 保持开放思维⭐"></a>24. 保持开放思维⭐</h2><p>技术在变化，而且变化得很快。不要反对新技术，学习它，然后形成自己的观点。</p><h2 id="25-保持在技术前沿，不要掉队⭐"><a href="#25-保持在技术前沿，不要掉队⭐" class="headerlink" title="25. 保持在技术前沿，不要掉队⭐"></a>25. 保持在技术前沿，不要掉队⭐</h2><p>通过关注出版物，博客，播客和科技新闻，及时了解最新的科技新闻。</p><h2 id="26-专注于解决问题⭐"><a href="#26-专注于解决问题⭐" class="headerlink" title="26. 专注于解决问题⭐"></a>26. 专注于解决问题⭐</h2><p>锻炼自己解决问题的能力，强大的解决问题的能力能够帮助你应付一切，专注于解决问题的方法。</p><h2 id="27-保持谦虚⭐"><a href="#27-保持谦虚⭐" class="headerlink" title="27. 保持谦虚⭐"></a>27. 保持谦虚⭐</h2><p>三人行必有我师，无论你什么头衔，什么公司，都要保持谦逊。</p><img src="/2019/08/29/译-成为一个优秀程序员的101个小建议/a5.png" title="a5"><h2 id="28-不光要代码写的好，PPT也要讲得好"><a href="#28-不光要代码写的好，PPT也要讲得好" class="headerlink" title="28. 不光要代码写的好，PPT也要讲得好"></a>28. 不光要代码写的好，PPT也要讲得好</h2><p>学习如何吸引你的听众，并给出有效的演示。</p><h2 id="29-选型如买菜，也要货比三家⭐"><a href="#29-选型如买菜，也要货比三家⭐" class="headerlink" title="29. 选型如买菜，也要货比三家⭐"></a>29. 选型如买菜，也要货比三家⭐</h2><p>给自己更多选择，在开展工作前，调研尽可能多的解决方案。</p><h2 id="30-找到自己的定位⭐"><a href="#30-找到自己的定位⭐" class="headerlink" title="30. 找到自己的定位⭐"></a>30. 找到自己的定位⭐</h2><p>科技产业也有很多分类，找到你最感兴趣的领域，并成为一名专家。</p><h2 id="31-养成好习惯⭐"><a href="#31-养成好习惯⭐" class="headerlink" title="31. 养成好习惯⭐"></a>31. 养成好习惯⭐</h2><p>试着建立一致的、健康的习惯，比如保持专注，合理安排时间，出席会议，从最重要的任务开始。这可能需要一些时间来适应，但从长远来看是值得的。</p><img src="/2019/08/29/译-成为一个优秀程序员的101个小建议/a6.png" title="a6"><h2 id="32-学会debug⭐"><a href="#32-学会debug⭐" class="headerlink" title="32. 学会debug⭐"></a>32. 学会debug⭐</h2><p>探索浏览器调试器工具。学习使用IDE调试的细节。通过学习最有效的调试问题和跟踪错误的方法，再困难的bug也能搞定。</p><h2 id="33-锻炼你现有的技能⭐"><a href="#33-锻炼你现有的技能⭐" class="headerlink" title="33. 锻炼你现有的技能⭐"></a>33. 锻炼你现有的技能⭐</h2><p>并不是说你已经掌握了一项技能就不需要再锻炼它。业精于勤荒于嬉，除非有意识地提高技能，否则技能会随着时间的推移而消失。而这个行业又发展得如此之快，坚持练习是很重要的。从“我一直都是这样做的”的心态中走出来，进入“有没有更好的方法来做这件事”的心态。<br>仅仅是因为你现在拥有六块腹肌，不意味着你就可以每天吃一个🍩。</p><h2 id="34-了解原因⭐"><a href="#34-了解原因⭐" class="headerlink" title="34. 了解原因⭐"></a>34. 了解原因⭐</h2><p>有时你必须表达自己的意见，因此了解其背后的原因非常重要。为什么解决方案A比解决方案B更好？提供有效的论据，你的意见将更加可靠。</p><h2 id="35-了解自己的价值"><a href="#35-了解自己的价值" class="headerlink" title="35. 了解自己的价值"></a>35. 了解自己的价值</h2><p>技术也是商品，应该得到适当的报酬。了解你所在地区的行业平均水平。如果你赚的钱少了，是时候和你的老板谈谈，追求你应得的。</p><h2 id="36-不要害怕寻求帮助⭐"><a href="#36-不要害怕寻求帮助⭐" class="headerlink" title="36. 不要害怕寻求帮助⭐"></a>36. 不要害怕寻求帮助⭐</h2><p>如果你被困在一个问题上，花了太多时间寻找解决方案，是时候寻求帮助了。我们都是人，我们都需要帮助，寻求同事的援助并不可耻。</p><h2 id="37-学会学习⭐"><a href="#37-学会学习⭐" class="headerlink" title="37. 学会学习⭐"></a>37. 学会学习⭐</h2><p>人们学习的方式不同，有些人通过视频教程学得最好，有些人通过阅读书籍学得最好。弄清楚你的学习风格，然后努力实践。</p><h2 id="38-与人为善"><a href="#38-与人为善" class="headerlink" title="38. 与人为善"></a>38. 与人为善</h2><p>有时你会被要求向同事提供反馈，友善一点，你可以对某位同事不够积极表达看法，而不是出言不逊。</p><h2 id="39-休息一下"><a href="#39-休息一下" class="headerlink" title="39. 休息一下"></a>39. 休息一下</h2><p>连续敲8个小时代码几乎是不可能，你很快就会筋疲力尽，犯很多错误。所以设个闹钟来提醒自己停下来休息一下。去散散步，和同事一起喝杯咖啡，远离屏幕会对你的工作效率和质量产生积极的影响。</p><h2 id="40-跟踪你的学习进度"><a href="#40-跟踪你的学习进度" class="headerlink" title="40. 跟踪你的学习进度"></a>40. 跟踪你的学习进度</h2><p>学习编程需要时间，当你看不到进展时，你会感到非常沮丧。所以跟踪你的成就和实现目标的进展非常重要。在你的电脑旁边放一个小清单，每次你完成一件事，把它写下来，不管它有多小，最终将会从量变到质变。</p><h2 id="41-不要依赖库和框架⭐"><a href="#41-不要依赖库和框架⭐" class="headerlink" title="41. 不要依赖库和框架⭐"></a>41. 不要依赖库和框架⭐</h2><p>掌握一个框架和库不如深入学习这门语言，没有必要一个接一个的学习这些库和框架，但是理解框架和库如何实现可以帮助你写出更简洁强壮的代码。</p><h2 id="42-学会爱上代码审查"><a href="#42-学会爱上代码审查" class="headerlink" title="42. 学会爱上代码审查"></a>42. 学会爱上代码审查</h2><p>让别人阅读和分析你的代码可能会让你不安，但是可以提供宝贵的反馈，这会让你成为一个更好的程序员。而且你也应该提高进行良好代码评审的能力。</p><h2 id="43-多方位全面学习"><a href="#43-多方位全面学习" class="headerlink" title="43. 多方位全面学习"></a>43. 多方位全面学习</h2><p>学习其他领域的基础知识, 如设计、营销、前端开发或后端开发。它将帮助你成为一个更全面的程序员。</p><h2 id="44-不要选择熟悉的技术，而应该是正确的⭐"><a href="#44-不要选择熟悉的技术，而应该是正确的⭐" class="headerlink" title="44. 不要选择熟悉的技术，而应该是正确的⭐"></a>44. 不要选择熟悉的技术，而应该是正确的⭐</h2><p>每个项目都有不同的需求，因此我们必须为这项工作选择合适的工具。尽管选择以前使用过的技术很方便，但是如果它们不适合项目的需要，应该探索其他替代方案。</p><h2 id="45-勇于承担责任⭐"><a href="#45-勇于承担责任⭐" class="headerlink" title="45. 勇于承担责任⭐"></a>45. 勇于承担责任⭐</h2><p>所有人都会犯错，在你的职业生涯中，你会犯很多很多的错误。因此，当你犯了错误时，站出来承担责任是很重要的，它将与你的团队成员和管理层建立信任。</p><h2 id="46-检查自己的代码⭐"><a href="#46-检查自己的代码⭐" class="headerlink" title="46. 检查自己的代码⭐"></a>46. 检查自己的代码⭐</h2><p>在发起PR请求之前，检查自己的代码，如果这是同事的工作，你会发表什么评论？在请求代码审查之前首先尝试自己诊断问题或错误非常重要，就像考试交卷前应该自己检查一遍。</p><h2 id="47-从失败中吸取教训⭐"><a href="#47-从失败中吸取教训⭐" class="headerlink" title="47. 从失败中吸取教训⭐"></a>47. 从失败中吸取教训⭐</h2><p>失败只是没有达到预期的结果，并不一定是件坏事。在我们的职业生涯中，我们会面临很多失败，从失败中学习下次你能做些什么。</p><h2 id="48-正视自己的缺点"><a href="#48-正视自己的缺点" class="headerlink" title="48. 正视自己的缺点"></a>48. 正视自己的缺点</h2><p>了解你自己，你的缺点是什么?也许你总是在推送之前忘记更新测试，或者你真的不擅长回复电子邮件。了解你的弱点，这样你就能积极地改善它们。</p><h2 id="49-保持好奇心⭐"><a href="#49-保持好奇心⭐" class="headerlink" title="49. 保持好奇心⭐"></a>49. 保持好奇心⭐</h2><p>这个行业在不断发展，所以好奇心很重要。如果你不明白什么，不管是项目需求还是一行代码，大声说出来。没有人会因为你要求说明而批评你，你会因此创造出更好的代码。</p><h2 id="50-不要试图学习一切⭐"><a href="#50-不要试图学习一切⭐" class="headerlink" title="50. 不要试图学习一切⭐"></a>50. 不要试图学习一切⭐</h2><p>世界上有无穷无尽的知识宝库，你不可能征服它。选择几个要掌握的主题，其余的就不要管了。你可以获得其他领域的相关知识，但你不可能掌握所有内容。</p><h2 id="51-该舍弃就舍弃"><a href="#51-该舍弃就舍弃" class="headerlink" title="51. 该舍弃就舍弃"></a>51. 该舍弃就舍弃</h2><p>仅仅因为你写了一些代码并不意味着你需要对它产生感情。没有人喜欢他们所做的工作被丢弃，但是代码有一个生命周期，所以没有必要一直保留着它。</p><h2 id="52-团队支持"><a href="#52-团队支持" class="headerlink" title="52. 团队支持"></a>52. 团队支持</h2><p>优秀的团队相互支持，这为尝试新事物创造了一个安全的空间，而不用担心受到惩罚。</p><h2 id="53-在社区中寻找鼓舞"><a href="#53-在社区中寻找鼓舞" class="headerlink" title="53. 在社区中寻找鼓舞"></a>53. 在社区中寻找鼓舞</h2><p>在行业里找几个你钦佩的人。它会激励你继续你的项目或尝试新事物</p><h2 id="54-重视并且珍惜你的工作"><a href="#54-重视并且珍惜你的工作" class="headerlink" title="54. 重视并且珍惜你的工作"></a>54. 重视并且珍惜你的工作</h2><p>不管你有多少经验或者你的职位是什么，你的工作都是有价值的，给予它应有的价值。</p><img src="/2019/08/29/译-成为一个优秀程序员的101个小建议/a7.png" title="a7"><h2 id="55-排除干扰"><a href="#55-排除干扰" class="headerlink" title="55. 排除干扰"></a>55. 排除干扰</h2><p>关掉闲置的通知、短信、电子邮件和社交媒体会帮助你集中精力，最大化你的工作日。晚30分钟回复你朋友的信息，他死不了，真有事就打电话了。</p><h2 id="56-乐于助人"><a href="#56-乐于助人" class="headerlink" title="56. 乐于助人"></a>56. 乐于助人</h2><p>试着支持你的团队成员，无论是参加一个重要的演讲，还是在他们遇到困难时帮助他们。</p><h2 id="57-不要吝啬你的赞美⭐"><a href="#57-不要吝啬你的赞美⭐" class="headerlink" title="57. 不要吝啬你的赞美⭐"></a>57. 不要吝啬你的赞美⭐</h2><p>如果有人做得很好，告诉他们。正面反馈是与团队成员建立信任和帮助他们事业发展的好方法。他们也更有可能帮助你</p><h2 id="58-测试你的代码⭐"><a href="#58-测试你的代码⭐" class="headerlink" title="58. 测试你的代码⭐"></a>58. 测试你的代码⭐</h2><p>测试是很重要的。单元测试、回归测试、集成测试、端到端测试。测试你的代码，你的产品将会更加稳定。</p><h2 id="59-制定应对计划"><a href="#59-制定应对计划" class="headerlink" title="59. 制定应对计划"></a>59. 制定应对计划</h2><p>当你收到一个新功能需求或bug修改时，先制定应对计划，你需要什么来解决这个问题或开发这个特性？花几分钟来做这件事，也许后面可以为你节省数小时的沮丧。</p><h2 id="60-掌握伪代码"><a href="#60-掌握伪代码" class="headerlink" title="60. 掌握伪代码"></a>60. 掌握伪代码</h2><p>伪代码是一项很好的技能，因为它允许你在不浪费时间编写代码的情况下考虑复杂的问题。将一种方法写在纸上，运行不同的测试用例，看看缺陷在哪里。</p><h2 id="61-记录你的成就"><a href="#61-记录你的成就" class="headerlink" title="61. 记录你的成就"></a>61. 记录你的成就</h2><p>如果你在工作中获得了嘉奖，把它写下来。如果你开发了一个重要的功能，把它写下来。你会拥有一些积累、沉淀，它将有助于你职业晋升亦或在某一艰难的日子鼓舞你的士气。</p><h2 id="62-学习编程基础⭐"><a href="#62-学习编程基础⭐" class="headerlink" title="62. 学习编程基础⭐"></a>62. 学习编程基础⭐</h2><p>学习一些基本的排序和搜索算法以及数据结构。它们与语言无关，可以帮助你跨语言解决问题。</p><h2 id="63-选择长期维护的技术"><a href="#63-选择长期维护的技术" class="headerlink" title="63. 选择长期维护的技术"></a>63. 选择长期维护的技术</h2><p>尽管测试最新的技术很有趣，但是选择那些在企业应用程序中易于维护的技术。你们的团队将在未来的岁月里感谢你们。</p><h2 id="64-学习设计模式⭐"><a href="#64-学习设计模式⭐" class="headerlink" title="64. 学习设计模式⭐"></a>64. 学习设计模式⭐</h2><p>设计模式是构建代码的有效工具。你可能不是每个项目都需要它们，但是对它们有一个基本的了解将有助于构建更大的应用程序。</p><h2 id="65-化繁为简⭐"><a href="#65-化繁为简⭐" class="headerlink" title="65. 化繁为简⭐"></a>65. 化繁为简⭐</h2><p>不要编写复杂的代码来展示你高超的编程技能，而要着眼于可读性和简单性。这将使你的团队成员更容易做出贡献。</p><h2 id="66-还清技术债务"><a href="#66-还清技术债务" class="headerlink" title="66. 还清技术债务"></a>66. 还清技术债务</h2><p>技术债务可能会对性能产生巨大影响，所以如果能够重构，就应该重构。（这个建议绝对是好的，但是现实中要面临诸多问题）</p><h2 id="67-优先小版本迭代"><a href="#67-优先小版本迭代" class="headerlink" title="67. 优先小版本迭代"></a>67. 优先小版本迭代</h2><p>与其每个月发布一次大规模的升级，不如更频繁地发布较小的变更。这样你不太可能会引入bug和破坏更改。</p><h2 id="68-尽早并经常提交⭐"><a href="#68-尽早并经常提交⭐" class="headerlink" title="68. 尽早并经常提交⭐"></a>68. 尽早并经常提交⭐</h2><p>尽早提交和经常提交是确保你的工作保持干净的最好方法，并且还可以减少意外地恢复重要更改的压力。</p><h2 id="69-了解何时寻求帮助"><a href="#69-了解何时寻求帮助" class="headerlink" title="69. 了解何时寻求帮助"></a>69. 了解何时寻求帮助</h2><p>你不仅不应该害怕寻求帮助，而且你应该学会什么时候寻求帮助。在寻求帮助之前，你应该试着解决问题，并记录下你尝试的事情。但是当你被一个简单的问题难住一个多小时的时候，代价大于收益，你应该向同事求助。</p><h2 id="70-问一些有效的问题⭐"><a href="#70-问一些有效的问题⭐" class="headerlink" title="70. 问一些有效的问题⭐"></a>70. 问一些有效的问题⭐</h2><p>当你问问题的时候，要尽可能的具体，（可以参考github提issue的要求）。</p><h2 id="71-工作中及时寻求反馈"><a href="#71-工作中及时寻求反馈" class="headerlink" title="71. 工作中及时寻求反馈"></a>71. 工作中及时寻求反馈</h2><p>你的工作不需要完成就能得到反馈。如果你不确定方向，请一位值得信赖的同事来检查你的解决方案的有效性。</p><h2 id="72-阅读文档⭐"><a href="#72-阅读文档⭐" class="headerlink" title="72. 阅读文档⭐"></a>72. 阅读文档⭐</h2><p>文档是关于技术的最纯粹的事实来源，因此学习阅读文档可以快速帮助你成为专家。</p><h2 id="73-尽可能做出各种尝试⭐"><a href="#73-尽可能做出各种尝试⭐" class="headerlink" title="73. 尽可能做出各种尝试⭐"></a>73. 尽可能做出各种尝试⭐</h2><p>没有什么能阻止你尝试解决问题的方法，你有什么损失呢？</p><h2 id="74-在会议上积极发言"><a href="#74-在会议上积极发言" class="headerlink" title="74. 在会议上积极发言"></a>74. 在会议上积极发言</h2><p>你的想法和意见是有价值的，所以参加会议将有助于你与你的团队和管理层建立融洽的关系。</p><h2 id="75-跨团队协作"><a href="#75-跨团队协作" class="headerlink" title="75. 跨团队协作"></a>75. 跨团队协作</h2><p>如果你有机会和公司里的其他团队一起工作，那就去争取吧。</p><h2 id="76-保持项目热情"><a href="#76-保持项目热情" class="headerlink" title="76. 保持项目热情"></a>76. 保持项目热情</h2><p>当你每周工作40个小时时，花时间做你感兴趣的项目是很重要的（72小时的话更要如此）。它们可以帮助你重新找回对编程的热爱，并尝试你在工作中可能无法接触到的新技术。</p><h2 id="77-确定你的职业目标⭐"><a href="#77-确定你的职业目标⭐" class="headerlink" title="77. 确定你的职业目标⭐"></a>77. 确定你的职业目标⭐</h2><p>对你的职业生涯有一个理想的轨迹是很重要的。如果你不这样做，你就是在没有目标的情况下射箭。</p><h2 id="78-加入到讨论中来⭐"><a href="#78-加入到讨论中来⭐" class="headerlink" title="78. 加入到讨论中来⭐"></a>78. 加入到讨论中来⭐</h2><p>在博客上发表评论，参与Twitter主题，参与社区活动，做一个积极的旁观者会比单纯的旁观学到更多东西。</p><h2 id="79-确定任务优先级"><a href="#79-确定任务优先级" class="headerlink" title="79. 确定任务优先级"></a>79. 确定任务优先级</h2><p>学会确定任务的优先顺序将有助于提高您的工作效率，建立一个日常任务和长期任务待办事项列表，并按最重要的顺序排序。</p><h2 id="80-不要忽略细节"><a href="#80-不要忽略细节" class="headerlink" title="80. 不要忽略细节"></a>80. 不要忽略细节</h2><p>细节可以在项目中产生很大的影响。</p><h2 id="81-信任你的同事"><a href="#81-信任你的同事" class="headerlink" title="81. 信任你的同事"></a>81. 信任你的同事</h2><p>你的同事因为他们的技能而被雇佣，交给他们工作，并相信他们能完成。</p><h2 id="82-学会委托"><a href="#82-学会委托" class="headerlink" title="82. 学会委托"></a>82. 学会委托</h2><p>如果你处于领导地位，学习如何有效地委派任务。它会节省你的时间，你不能做所有的事。</p><h2 id="83-不要拿自己和别人比较"><a href="#83-不要拿自己和别人比较" class="headerlink" title="83. 不要拿自己和别人比较"></a>83. 不要拿自己和别人比较</h2><p>你唯一应该比较的是昨天的自己。</p><h2 id="84-找到你的盟友"><a href="#84-找到你的盟友" class="headerlink" title="84. 找到你的盟友"></a>84. 找到你的盟友</h2><p>学习编程将是一个漫长而不怎么容易的过程，和那些帮助你成长并鼓励你坚持下去的人在一起。</p><h2 id="85-不要想一步登天⭐"><a href="#85-不要想一步登天⭐" class="headerlink" title="85. 不要想一步登天⭐"></a>85. 不要想一步登天⭐</h2><p>一开始考虑太多做一个大而全的项目会让你不堪重负。构建时要考虑可伸缩性，但在需要时才开始扩展。这样你就不会用不必要的膨胀来压倒你的团队，而是保持了成长的能力。</p><h2 id="86-衡量性能影响⭐"><a href="#86-衡量性能影响⭐" class="headerlink" title="86. 衡量性能影响⭐"></a>86. 衡量性能影响⭐</h2><p>如果你想使用一种很酷的新技术，你应该权衡这样做的性能影响。你能在不影响性能的情况下实现类似的功能吗？如果可以，你可能需要重新考虑你的方法了。</p><h2 id="87-技术歧视不可取⭐"><a href="#87-技术歧视不可取⭐" class="headerlink" title="87. 技术歧视不可取⭐"></a>87. 技术歧视不可取⭐</h2><p>不要歧视新技术或新想法，对学习新技能的可能性保持开放的心态，也不要歧视他人，我们都值得尊重。（也不要歧视旧技术，即使现在前端框架盛行，但你也不能说Jquery就没有任何可取之处。）</p><h2 id="88-申请你不能胜任的工作"><a href="#88-申请你不能胜任的工作" class="headerlink" title="88. 申请你不能胜任的工作"></a>88. 申请你不能胜任的工作</h2><p>你永远不可能满足工作的所有要求，所以抓住机会申请吧，你有什么损失呢？</p><h2 id="89-模块化你的代码"><a href="#89-模块化你的代码" class="headerlink" title="89. 模块化你的代码"></a>89. 模块化你的代码</h2><p>你可以在一个长文件中编写所有代码，但这是不可维护的。通过模块化，我们确保代码易于理解和测试。</p><h2 id="90-不要只是做代码的搬运工⭐"><a href="#90-不要只是做代码的搬运工⭐" class="headerlink" title="90. 不要只是做代码的搬运工⭐"></a>90. 不要只是做代码的搬运工⭐</h2><p>如果你要复制并粘贴Stack Overflow中的解决方案，你应该确切地理解它的作用，有意识地选择要引入的代码。</p><h2 id="91-创造一个舒适的工作环境⭐"><a href="#91-创造一个舒适的工作环境⭐" class="headerlink" title="91. 创造一个舒适的工作环境⭐"></a>91. 创造一个舒适的工作环境⭐</h2><p>如果你喜欢你的工作环境和技术设置，你会更有动力去工作，所以还在等什么？</p><h2 id="92-记住你来自哪里"><a href="#92-记住你来自哪里" class="headerlink" title="92. 记住你来自哪里"></a>92. 记住你来自哪里</h2><p>我们都是从同一个地方开始的，随着你的技能和职位的发展，不要忘记你来自哪里，不要膨胀。</p><h2 id="93-试着保持乐观"><a href="#93-试着保持乐观" class="headerlink" title="93. 试着保持乐观"></a>93. 试着保持乐观</h2><p>如果出了什么问题，试着乐观一点。明天是新的一天。乐观会帮助你的团队充满活力和精神健康。</p><h2 id="94-不断重新评估你的工作流程⭐"><a href="#94-不断重新评估你的工作流程⭐" class="headerlink" title="94. 不断重新评估你的工作流程⭐"></a>94. 不断重新评估你的工作流程⭐</h2><p>仅仅因为某样东西现在有效，并不意味着它永远有效。重新评估你的工作流程，并在必要时做出调整。</p><h2 id="95-学会在家办公"><a href="#95-学会在家办公" class="headerlink" title="95. 学会在家办公"></a>95. 学会在家办公</h2><p>如果你有能力在家工作，那就学会有效地在家工作。找一个独立的办公空间，远离干扰。Boneskull写了一篇很棒的关于在家工作的文章，你应该看看。</p><img src="/2019/08/29/译-成为一个优秀程序员的101个小建议/a8.png" title="a8"><h2 id="96-无障碍代码"><a href="#96-无障碍代码" class="headerlink" title="96. 无障碍代码"></a>96. 无障碍代码</h2><p>无障碍不是事后才想到的，也不一定很难，每个人都应该能够使用你的产品。</p><h2 id="97-遵守你的承诺⭐"><a href="#97-遵守你的承诺⭐" class="headerlink" title="97. 遵守你的承诺⭐"></a>97. 遵守你的承诺⭐</h2><p>如果你告诉别人你会在某一天完成某件事，要信守承诺。如果你不能在截止日期前完成任务，那就早点说出来。</p><h2 id="98-积极主动"><a href="#98-积极主动" class="headerlink" title="98. 积极主动"></a>98. 积极主动</h2><p>如果你有额外的精力，找一个任务来帮助你的团队，他们会很感激你是主动的。</p><h2 id="99-创建一个令人惊叹的作品集"><a href="#99-创建一个令人惊叹的作品集" class="headerlink" title="99. 创建一个令人惊叹的作品集"></a>99. 创建一个令人惊叹的作品集</h2><p>一个优秀的作品集让你与众不同，使用它作为展示你的编程和设计技巧的机会！</p><h2 id="100-记住你喜欢编程的原因⭐"><a href="#100-记住你喜欢编程的原因⭐" class="headerlink" title="100. 记住你喜欢编程的原因⭐"></a>100. 记住你喜欢编程的原因⭐</h2><p>你进入这个行业是因为它激发了你的兴趣，如果你感到沮丧和怨恨，休息一下，给自己空间重新点燃你对编程的激情。</p><h2 id="101-分享你的知识⭐"><a href="#101-分享你的知识⭐" class="headerlink" title="101. 分享你的知识⭐"></a>101. 分享你的知识⭐</h2><p>如果你学到了一些很酷的东西，不要吝惜分享它，参加当地的技术交流会，在午餐时间教你的同事或学员，分享你的知识可以让更多人受益同时自己也能巩固提高。</p><p>最后多加两条：</p><h2 id="102-条适当锻炼和"><a href="#102-条适当锻炼和" class="headerlink" title="102. 条适当锻炼和"></a>102. 条适当锻炼和</h2><h2 id="103-条充足睡眠"><a href="#103-条充足睡眠" class="headerlink" title="103. 条充足睡眠"></a>103. 条充足睡眠</h2><img src="/2019/08/29/译-成为一个优秀程序员的101个小建议/a9.png" title="a9">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;原文作者：&lt;/strong&gt;&lt;a href=&quot;https://dev.to/emmawedekind&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Emma Wedekind&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原文链接：&lt;/strong&gt;&lt;a href=&quot;https://dev.to/emmawedekind/101-tips-for-being-a-great-programmer-human-36nl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dev.to/emmawedekin…&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="译文" scheme="http://yoursite.com/categories/%E8%AF%91%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>iOS内购相关封装</title>
    <link href="http://yoursite.com/2019/05/28/iOS%E5%86%85%E8%B4%AD%E7%9B%B8%E5%85%B3%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2019/05/28/iOS内购相关封装/</id>
    <published>2019-05-28T09:10:23.000Z</published>
    <updated>2021-11-24T08:06:09.634Z</updated>
    
    <content type="html"><![CDATA[<h3 id="将内购相关d功能封装成单例类，直接上代码"><a href="#将内购相关d功能封装成单例类，直接上代码" class="headerlink" title="将内购相关d功能封装成单例类，直接上代码"></a>将内购相关d功能封装成单例类，直接上代码</h3><p>.h相关代码如下：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#import &lt;StoreKit/StoreKit.h&gt;</span><br><span class="line"></span><br><span class="line">@protocol YYAInAppPurchaseToolDelegate &lt;NSObject&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  TODO: System error.</span><br><span class="line">*/</span><br><span class="line">- (void)IAPToolSysWrong;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  已刷新可购买商品</span><br><span class="line">*</span><br><span class="line">*  @param products 商品数组</span><br><span class="line">*/</span><br><span class="line">- (void)IAPToolGotProducts:(NSMutableArray *)products;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  购买成功</span><br><span class="line">*</span><br><span class="line">*  @param productID 购买成功的商品ID</span><br><span class="line">*/</span><br><span class="line">- (void)IAPToolBoughtProductSuccessedWithProductID:(NSString *)productID</span><br><span class="line">andInfo:(NSDictionary *)infoDic;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  取消购买</span><br><span class="line">*</span><br><span class="line">*  @param productID 商品ID</span><br><span class="line">*/</span><br><span class="line">- (void)IAPToolCanceldWithProductID:(NSString *)productID;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  购买成功，开始验证购买</span><br><span class="line">*</span><br><span class="line">*  @param productID 商品ID</span><br><span class="line">*/</span><br><span class="line">- (void)IAPToolBeginCheckingdWithProductID:(NSString *)productID;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  重复验证</span><br><span class="line">*</span><br><span class="line">*  @param productID 商品ID</span><br><span class="line">*/</span><br><span class="line">- (void)IAPToolCheckRedundantWithProductID:(NSString *)productID;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  验证失败</span><br><span class="line">*</span><br><span class="line">*  @param productID 商品ID</span><br><span class="line">*/</span><br><span class="line">- (void)IAPToolCheckFailedWithProductID:(NSString *)productID</span><br><span class="line">andInfo:(NSData *)infoData;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  恢复了已购买的商品（永久性商品）</span><br><span class="line">*</span><br><span class="line">*  @param productID 商品ID</span><br><span class="line">*/</span><br><span class="line">- (void)IAPToolRestoredProductID:(NSString *)productID;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface YYAInAppPurchaseTool : NSObject</span><br><span class="line"></span><br><span class="line">typedef void(^BoolBlock)(BOOL successed,BOOL result);</span><br><span class="line"></span><br><span class="line">typedef void(^DicBlock)(BOOL successed,NSDictionary *result);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  代理</span><br><span class="line">*/</span><br><span class="line">@property(nonatomic,weak) id &lt;YYAInAppPurchaseToolDelegate&gt; delegate;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  购买完后是否在iOS端向服务器验证一次,默认为YES</span><br><span class="line">*/</span><br><span class="line">@property(nonatomic)BOOL CheckAfterPay;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  单例</span><br><span class="line">*</span><br><span class="line">*  @return YQInAppPurchaseTool</span><br><span class="line">*/</span><br><span class="line">+(YYAInAppPurchaseTool *)defaultTool;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  询问苹果的服务器能够销售哪些商品</span><br><span class="line">*</span><br><span class="line">*  @param products 商品ID的数组</span><br><span class="line">*/</span><br><span class="line">- (void)requestProductsWithProductArray:(NSArray *)products;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  用户决定购买商品</span><br><span class="line">*</span><br><span class="line">*  @param productID 商品ID</span><br><span class="line">*/</span><br><span class="line">- (void)buyProduct:(NSString *)productID;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  恢复商品（仅限永久有效商品）</span><br><span class="line">*/</span><br><span class="line">- (void)restorePurchase;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></p><p>.m相关代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line">#import &quot;YYAInAppPurchaseTool.h&quot;</span><br><span class="line"></span><br><span class="line">#ifdef DEBUG</span><br><span class="line">#define checkURL @&quot;https://sandbox.itunes.apple.com/verifyReceipt&quot;</span><br><span class="line">#else</span><br><span class="line">#define checkURL @&quot;https://buy.itunes.apple.com/verifyReceipt&quot;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">@interface YYAInAppPurchaseTool ()&lt;SKPaymentTransactionObserver,SKProductsRequestDelegate&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">*  商品字典</span><br><span class="line">*/</span><br><span class="line">@property(nonatomic,strong)NSMutableDictionary *productDict;</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation YYAInAppPurchaseTool</span><br><span class="line"></span><br><span class="line">static YYAInAppPurchaseTool *storeTool;</span><br><span class="line"></span><br><span class="line">/// 单例</span><br><span class="line">+ (YYAInAppPurchaseTool *)defaultTool &#123;</span><br><span class="line">if(!storeTool)&#123;</span><br><span class="line">storeTool = [YYAInAppPurchaseTool new];</span><br><span class="line">[storeTool setup];</span><br><span class="line">&#125;</span><br><span class="line">return storeTool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark  初始化</span><br><span class="line"></span><br><span class="line">- (void)setup &#123;</span><br><span class="line"></span><br><span class="line">self.CheckAfterPay = YES;</span><br><span class="line"></span><br><span class="line">// 设置购买队列的监听器</span><br><span class="line">[[SKPaymentQueue defaultQueue] addTransactionObserver:self];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// 询问苹果的服务器能够销售哪些商品</span><br><span class="line">- (void)requestProductsWithProductArray:(NSArray *)products &#123;</span><br><span class="line">NSLog(@&quot;开始请求可销售商品&quot;);</span><br><span class="line"></span><br><span class="line">// 能够销售的商品</span><br><span class="line">NSSet *set = [[NSSet alloc] initWithArray:products];</span><br><span class="line"></span><br><span class="line">// &quot;异步&quot;询问苹果能否销售</span><br><span class="line">SKProductsRequest *request = [[SKProductsRequest alloc] initWithProductIdentifiers:set];</span><br><span class="line"></span><br><span class="line">request.delegate = self;</span><br><span class="line"></span><br><span class="line">// 启动请求</span><br><span class="line">[request start];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark 获取询问结果，成功采取操作把商品加入可售商品字典里</span><br><span class="line">/**</span><br><span class="line">*  获取询问结果，成功采取操作把商品加入可售商品字典里</span><br><span class="line">*</span><br><span class="line">*  @param request  请求内容</span><br><span class="line">*  @param response 返回的结果</span><br><span class="line">*/</span><br><span class="line">- (void)productsRequest:(SKProductsRequest *)request didReceiveResponse:(SKProductsResponse *)response &#123;</span><br><span class="line">if (self.productDict == nil) &#123;</span><br><span class="line">self.productDict = [NSMutableDictionary dictionaryWithCapacity:response.products.count];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NSMutableArray *productArray = [NSMutableArray array];</span><br><span class="line"></span><br><span class="line">for (SKProduct *product in response.products) &#123;</span><br><span class="line">//NSLog(@&quot;%@&quot;, product.productIdentifier);</span><br><span class="line"></span><br><span class="line">// 填充商品字典</span><br><span class="line">[self.productDict setObject:product forKey:product.productIdentifier];</span><br><span class="line"></span><br><span class="line">[productArray addObject:product];</span><br><span class="line">&#125;</span><br><span class="line">//通知代理</span><br><span class="line">[self.delegate IAPToolGotProducts:productArray];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 用户决定购买商品</span><br><span class="line">/**</span><br><span class="line">*  用户决定购买商品</span><br><span class="line">*</span><br><span class="line">*  @param productID 商品ID</span><br><span class="line">*/</span><br><span class="line">- (void)buyProduct:(NSString *)productID &#123;</span><br><span class="line">SKProduct *product = self.productDict[productID];</span><br><span class="line"></span><br><span class="line">// 要购买产品(店员给用户开了个小票)</span><br><span class="line">SKPayment *payment = [SKPayment paymentWithProduct:product];</span><br><span class="line"></span><br><span class="line">// 去收银台排队，准备购买(异步网络)</span><br><span class="line">[[SKPaymentQueue defaultQueue] addPayment:payment];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - SKPaymentTransaction Observer</span><br><span class="line">#pragma mark 购买队列状态变化,,判断购买状态是否成功</span><br><span class="line">/**</span><br><span class="line">*  监测购买队列的变化</span><br><span class="line">*</span><br><span class="line">*  @param queue        队列</span><br><span class="line">*  @param transactions 交易</span><br><span class="line">*/</span><br><span class="line">- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions &#123;</span><br><span class="line">// 处理结果</span><br><span class="line">for (SKPaymentTransaction *transaction in transactions) &#123;</span><br><span class="line">NSLog(@&quot;队列状态变化 %@&quot;, transaction);</span><br><span class="line">// 如果小票状态是购买完成</span><br><span class="line">if (SKPaymentTransactionStatePurchased == transaction.transactionState) &#123;</span><br><span class="line">//NSLog(@&quot;购买完成 %@&quot;, transaction.payment.productIdentifier);</span><br><span class="line"></span><br><span class="line">if(self.CheckAfterPay)&#123;</span><br><span class="line">//需要向苹果服务器验证一下</span><br><span class="line">//通知代理</span><br><span class="line">[self.delegate IAPToolBeginCheckingdWithProductID:transaction.payment.productIdentifier];</span><br><span class="line">// 验证购买凭据</span><br><span class="line">[self verifyPruchaseWithID:transaction.payment.productIdentifier];</span><br><span class="line">&#125;else&#123;</span><br><span class="line">//不需要向苹果服务器验证</span><br><span class="line">//通知代理</span><br><span class="line">[self.delegate IAPToolBoughtProductSuccessedWithProductID:transaction.payment.productIdentifier</span><br><span class="line">andInfo:nil];</span><br><span class="line">&#125;</span><br><span class="line">// 将交易从交易队列中删除</span><br><span class="line">[[SKPaymentQueue defaultQueue] finishTransaction:transaction];</span><br><span class="line"></span><br><span class="line">&#125; else if (SKPaymentTransactionStateRestored == transaction.transactionState) &#123;</span><br><span class="line">//NSLog(@&quot;恢复成功 :%@&quot;, transaction.payment.productIdentifier);</span><br><span class="line"></span><br><span class="line">// 通知代理</span><br><span class="line">[self.delegate IAPToolRestoredProductID:transaction.payment.productIdentifier];</span><br><span class="line"></span><br><span class="line">// 将交易从交易队列中删除</span><br><span class="line">[[SKPaymentQueue defaultQueue] finishTransaction:transaction];</span><br><span class="line">&#125; else if (SKPaymentTransactionStateFailed == transaction.transactionState)&#123;</span><br><span class="line"></span><br><span class="line">// 将交易从交易队列中删除</span><br><span class="line">[[SKPaymentQueue defaultQueue] finishTransaction:transaction];</span><br><span class="line">//NSLog(@&quot;交易失败&quot;);</span><br><span class="line">[self.delegate IAPToolCanceldWithProductID:transaction.payment.productIdentifier];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;else if(SKPaymentTransactionStatePurchasing == transaction.transactionState)&#123;</span><br><span class="line">NSLog(@&quot;正在购买&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">NSLog(@&quot;state:%ld&quot;,(long)transaction.transactionState);</span><br><span class="line">NSLog(@&quot;已经购买&quot;);</span><br><span class="line">// 将交易从交易队列中删除</span><br><span class="line">[[SKPaymentQueue defaultQueue] finishTransaction:transaction];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - 恢复商品</span><br><span class="line">/**</span><br><span class="line">*  恢复商品</span><br><span class="line">*/</span><br><span class="line">- (void)restorePurchase &#123;</span><br><span class="line">// 恢复已经完成的所有交易.（仅限永久有效商品）</span><br><span class="line">[[SKPaymentQueue defaultQueue] restoreCompletedTransactions];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark 验证购买凭据</span><br><span class="line">/**</span><br><span class="line">*  验证购买凭据</span><br><span class="line">*</span><br><span class="line">*  @param ProductID 商品ID</span><br><span class="line">*/</span><br><span class="line">- (void)verifyPruchaseWithID:(NSString *)ProductID &#123;</span><br><span class="line">// 验证凭据，获取到苹果返回的交易凭据</span><br><span class="line">// appStoreReceiptURL iOS7.0增加的，购买交易完成后，会将凭据存放在该地址</span><br><span class="line">NSURL *receiptURL = [[NSBundle mainBundle] appStoreReceiptURL];</span><br><span class="line">// 从沙盒中获取到购买凭据</span><br><span class="line">NSData *receiptData = [NSData dataWithContentsOfURL:receiptURL];</span><br><span class="line"></span><br><span class="line">// 发送网络POST请求，对购买凭据进行验证</span><br><span class="line">//In the test environment, use https://sandbox.itunes.apple.com/verifyReceipt</span><br><span class="line">//In the real environment, use https://buy.itunes.apple.com/verifyReceipt</span><br><span class="line">// Create a POST request with the receipt data.</span><br><span class="line">NSURL *url = [NSURL URLWithString:checkURL];</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;checkURL:%@&quot;,checkURL);</span><br><span class="line"></span><br><span class="line">// 国内访问苹果服务器比较慢，timeoutInterval需要长一点</span><br><span class="line">NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:20.0f];</span><br><span class="line"></span><br><span class="line">request.HTTPMethod = @&quot;POST&quot;;</span><br><span class="line"></span><br><span class="line">// 在网络中传输数据，大多情况下是传输的字符串而不是二进制数据</span><br><span class="line">// 传输的是BASE64编码的字符串</span><br><span class="line">/**</span><br><span class="line">BASE64 常用的编码方案，通常用于数据传输，以及加密算法的基础算法，传输过程中能够保证数据传输的稳定性</span><br><span class="line">BASE64是可以编码和解码的</span><br><span class="line">*/</span><br><span class="line">NSString *encodeStr = [receiptData base64EncodedStringWithOptions:NSDataBase64EncodingEndLineWithLineFeed];</span><br><span class="line"></span><br><span class="line">NSString *payload = [NSString stringWithFormat:@&quot;&#123;\&quot;receipt-data\&quot; : \&quot;%@\&quot;&#125;&quot;, encodeStr];</span><br><span class="line">NSData *payloadData = [payload dataUsingEncoding:NSUTF8StringEncoding];</span><br><span class="line"></span><br><span class="line">request.HTTPBody = payloadData;</span><br><span class="line"></span><br><span class="line">// 提交验证请求，并获得官方的验证JSON结果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NSURLSession *session = [NSURLSession sharedSession];</span><br><span class="line"></span><br><span class="line">// 4.根据会话对象，创建一个Task任务</span><br><span class="line"></span><br><span class="line">NSURLSessionDataTask *sessionDataTask = [session dataTaskWithRequest:request completionHandler:^(NSData * _Nullable data, NSURLResponse * _Nullable response, NSError * _Nullable error) &#123;</span><br><span class="line"></span><br><span class="line">NSLog(@&quot;从服务器获取到数据&quot;);</span><br><span class="line"></span><br><span class="line">NSDictionary *dict = [NSJSONSerialization JSONObjectWithData:data options:(NSJSONReadingMutableLeaves) error:nil];</span><br><span class="line"></span><br><span class="line">if (dict != nil) &#123;</span><br><span class="line">// 验证成功,通知代理</span><br><span class="line">// bundle_id&amp;application_version&amp;product_id&amp;transaction_id</span><br><span class="line">[self.delegate IAPToolBoughtProductSuccessedWithProductID:ProductID</span><br><span class="line">andInfo:dict];</span><br><span class="line">&#125; else &#123;</span><br><span class="line"></span><br><span class="line">//验证失败,通知代理</span><br><span class="line">[self.delegate IAPToolCheckFailedWithProductID:ProductID</span><br><span class="line">andInfo:data];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[sessionDataTask resume];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;将内购相关d功能封装成单例类，直接上代码&quot;&gt;&lt;a href=&quot;#将内购相关d功能封装成单例类，直接上代码&quot; class=&quot;headerlink&quot; title=&quot;将内购相关d功能封装成单例类，直接上代码&quot;&gt;&lt;/a&gt;将内购相关d功能封装成单例类，直接上代码&lt;/h3&gt;&lt;p&gt;.h相关代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="内购" scheme="http://yoursite.com/tags/%E5%86%85%E8%B4%AD/"/>
    
  </entry>
  
  <entry>
    <title>React Native开发环境的搭建（Mac）</title>
    <link href="http://yoursite.com/2019/05/24/React-Native%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA%EF%BC%88Mac%EF%BC%89/"/>
    <id>http://yoursite.com/2019/05/24/React-Native开发环境的搭建（Mac）/</id>
    <published>2019-05-24T06:38:30.000Z</published>
    <updated>2019-05-27T08:16:51.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>1.先安装Homebrew（若已安装，可跳过）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/</span><br></pre></td></tr></table></figure></p><p>2.安装node和webpack</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br><span class="line">brew install webpack</span><br></pre></td></tr></table></figure><p>测试node和webpack是否安装成功，可用如下命令进行检测。若本地安装，则会显示对应版本号。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">webpack -v</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>3.设置国内镜像（常年开vpn的可以忽略）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure></p><p>这里出错了，按提示走就可以，复制sudo那一行更改目录权限，再设置国内镜像。</p><p>4.安装RN：直接输入<code>npm install -g react-native-cli</code>。会因为权限不够而报错：npm WARN checkPermissions Missing write access to /usr/local/lib/node_modules。所以我们直接输入下面两句话<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) /usr/local/*</span><br><span class="line">npm install -g yarn react-native-cli</span><br></pre></td></tr></table></figure></p><p>测试是否安装成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native -v</span><br></pre></td></tr></table></figure></p><h2 id="创建RN项目到本地"><a href="#创建RN项目到本地" class="headerlink" title="创建RN项目到本地"></a>创建RN项目到本地</h2><p>1.创建RN项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init AwesomeProject</span><br></pre></td></tr></table></figure></p><p>2.编译并运行 React Native 应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd AwesomeProject</span><br><span class="line">react-native run-ios</span><br></pre></td></tr></table></figure></p><img src="/2019/05/24/React-Native开发环境的搭建（Mac）/screenShots.png" title="运行结果"><blockquote><p>提示：如果 run-ios 无法正常运行，请使用 Xcode 运行来查看具体错误（run-ios 的报错没有任何具体信息）。第一次运行会比较慢，需要耐心等待一下</p></blockquote><p>3.修改项目<br>现在你已经成功运行了项目，我们可以开始尝试动手改一改了：</p><ul><li>使用你喜欢的编辑器打开App.js并随便改上几行。 </li><li>在 iOS 模拟器中按下<em>⌘-R</em>就可以刷新 APP并看到你的最新修改！（如果没有反应，请检查模拟器的 Hardware 菜单中，connect hardware keyboard    选项是否选中开启）</li></ul><h2 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h2><img src="/2019/05/24/React-Native开发环境的搭建（Mac）/皮卡丘.gif" title="皮卡皮卡丘">]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h2&gt;&lt;p&gt;1.先安装Homebrew（若已安装，可跳过）&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.安装node和webpack&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew install webpack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;测试node和webpack是否安装成功，可用如下命令进行检测。若本地安装，则会显示对应版本号。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node -v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;webpack -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React Native" scheme="http://yoursite.com/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://yoursite.com/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>iOS截图那些事</title>
    <link href="http://yoursite.com/2018/09/06/iOS%E6%88%AA%E5%9B%BE%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://yoursite.com/2018/09/06/iOS截图那些事/</id>
    <published>2018-09-06T02:45:04.000Z</published>
    <updated>2021-11-26T03:41:10.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="普通view截图"><a href="#普通view截图" class="headerlink" title="普通view截图"></a>普通view截图</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (UIImage *)gjj_viewScreenShot:(UIView *)view &#123;</span><br><span class="line">UIGraphicsBeginImageContextWithOptions(CGSizeMake(view.frame.size.width, view.frame.size.height ), NO, 0.0);</span><br><span class="line">[view.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class="line">/// 返回一个基于当前图形上下文的图片</span><br><span class="line">UIImage *viewImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line"></span><br><span class="line">/// 移除栈顶的基于当前位图的图形上下文</span><br><span class="line">UIGraphicsEndImageContext();</span><br><span class="line">return viewImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="tableView、collectionView等scrollView生成长截图"><a href="#tableView、collectionView等scrollView生成长截图" class="headerlink" title="tableView、collectionView等scrollView生成长截图"></a>tableView、collectionView等scrollView生成长截图</h2><p>实现步骤</p><ol><li>保存scrollView截取前的偏移量及Frame</li><li>计算出你要截取的长图的高度及宽度，即scrollView的contentSize，将scrollView.frame设成scrollView.contentSize</li><li>渲染出scrollView整体（上下文），截取当前scrollView生成Image</li><li>恢复scrollView的偏移量及Frame</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+ (UIImage *)gjj_scrollViewScreenShot:(UIScrollView *)scrollView &#123;</span><br><span class="line">UIImage *image = nil;</span><br><span class="line"></span><br><span class="line">UIGraphicsBeginImageContextWithOptions(scrollView.contentSize, YES, [UIScreen mainScreen].scale);</span><br><span class="line">CGPoint saveContentOffset = scrollView.contentOffset;</span><br><span class="line">CGRect savedFrame = scrollView.frame;</span><br><span class="line">scrollView.contentOffset = CGPointZero;</span><br><span class="line">scrollView.frame = CGRectMake(0, 0, scrollView.contentSize.width, scrollView.contentSize.height);</span><br><span class="line">[scrollView.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class="line">scrollView.layer.contents = nil;</span><br><span class="line">image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">scrollView.contentOffset = saveContentOffset;</span><br><span class="line">scrollView.frame = savedFrame;</span><br><span class="line">UIGraphicsEndImageContext();</span><br><span class="line">return image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webView生成长截图"><a href="#webView生成长截图" class="headerlink" title="webView生成长截图"></a>webView生成长截图</h2><p>webView和scrollView的截图大同小异</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+ (UIImage *)gjj_webViewScreenShot:(UIWebView *)webView &#123;</span><br><span class="line">UIImage *image = nil;</span><br><span class="line"></span><br><span class="line">UIGraphicsBeginImageContextWithOptions(webView.scrollView.contentSize, YES, [UIScreen mainScreen].scale);</span><br><span class="line">CGPoint saveContentOffset = webView.scrollView.contentOffset;</span><br><span class="line">CGRect savedFrame = webView.frame;</span><br><span class="line">webView.scrollView.contentOffset = CGPointZero;</span><br><span class="line">webView.frame = CGRectMake(0, 0, webView.scrollView.contentSize.width, webView.scrollView.contentSize.height);</span><br><span class="line">[webView.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class="line">webView.layer.contents = nil;</span><br><span class="line">image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">webView.scrollView.contentOffset = saveContentOffset;</span><br><span class="line">webView.frame = savedFrame;</span><br><span class="line">UIGraphicsEndImageContext();</span><br><span class="line">return image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图片拼接"><a href="#图片拼接" class="headerlink" title="图片拼接"></a>图片拼接</h2><p>很多需求是截图附带二维码等进行分享。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+ (UIImage *)gjj_addHeadImage:(UIImage *)headImage footImage:(UIImage *)footImage toMasterImage:(UIImage *)masterImage &#123;</span><br><span class="line">CGSize size;</span><br><span class="line">size.width = masterImage.size.width;</span><br><span class="line"></span><br><span class="line">CGFloat headProportion = !headImage?0:(headImage.size.width / headImage.size.height);</span><br><span class="line">CGFloat footProportion = !footImage?0:(footImage.size.width / footImage.size.height);</span><br><span class="line"></span><br><span class="line">CGFloat headHeight = !headImage? 0:masterImage.size.width/headProportion;</span><br><span class="line">CGFloat footHeight = !footImage? 0:footImage.size.width/footProportion;</span><br><span class="line"></span><br><span class="line">size.height = masterImage.size.height + headHeight + footHeight;</span><br><span class="line"></span><br><span class="line">UIGraphicsBeginImageContextWithOptions(size, YES, 0.0);</span><br><span class="line"></span><br><span class="line">if (headImage) &#123;</span><br><span class="line">[headImage drawInRect:CGRectMake(0, 0, masterImage.size.width, headHeight)];</span><br><span class="line">&#125;</span><br><span class="line">[masterImage drawInRect:CGRectMake(0, headHeight, masterImage.size.width, masterImage.size.height)];</span><br><span class="line">if (footImage) &#123;</span><br><span class="line">[footImage drawInRect:CGRectMake(0, masterImage.size.height + headHeight, masterImage.size.width, footHeight)];</span><br><span class="line">&#125;</span><br><span class="line">UIImage *resultImage = UIGraphicsGetImageFromCurrentImageContext(); UIGraphicsEndImageContext();</span><br><span class="line">return resultImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加水印"><a href="#添加水印" class="headerlink" title="添加水印"></a>添加水印</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (UIImage *)gjj_addWaterImage:(UIImage *)waterImage toMasterImage:(UIImage *)masterImage waterImageRect:(CGRect)rect &#123;</span><br><span class="line">UIGraphicsBeginImageContextWithOptions(masterImage.size, NO, 0);</span><br><span class="line">[masterImage drawInRect:CGRectMake(0, 0, masterImage.size.width, masterImage.size.height)];</span><br><span class="line">/// 绘制水印图片到当前上下文</span><br><span class="line">[waterImage drawInRect:rect];</span><br><span class="line"></span><br><span class="line">UIImage * newImage = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class="line">UIGraphicsEndImageContext();</span><br><span class="line">return newImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;普通view截图&quot;&gt;&lt;a href=&quot;#普通view截图&quot; class=&quot;headerlink&quot; title=&quot;普通view截图&quot;&gt;&lt;/a&gt;普通view截图&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;+ (UIImage *)gjj_viewScreenShot:(UIView *)view &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIGraphicsBeginImageContextWithOptions(CGSizeMake(view.frame.size.width, view.frame.size.height ), NO, 0.0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[view.layer renderInContext:UIGraphicsGetCurrentContext()];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// 返回一个基于当前图形上下文的图片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIImage *viewImage = UIGraphicsGetImageFromCurrentImageContext();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/// 移除栈顶的基于当前位图的图形上下文&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;UIGraphicsEndImageContext();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return viewImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="截图" scheme="http://yoursite.com/tags/%E6%88%AA%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>【C实现】给出一个字符串，要求将其按照单词顺序进行反转 </title>
    <link href="http://yoursite.com/2018/08/21/%E3%80%90C%E5%AE%9E%E7%8E%B0%E3%80%91%E7%BB%99%E5%87%BA%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E8%A6%81%E6%B1%82%E5%B0%86%E5%85%B6%E6%8C%89%E7%85%A7%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F%E8%BF%9B%E8%A1%8C%E5%8F%8D%E8%BD%AC/"/>
    <id>http://yoursite.com/2018/08/21/【C实现】给出一个字符串，要求将其按照单词顺序进行反转/</id>
    <published>2018-08-21T02:35:59.000Z</published>
    <updated>2018-09-07T06:13:51.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the-sky-is-blue”-那么反转之后的结果就是”blue-is-sky-the”。"><a href="#题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the-sky-is-blue”-那么反转之后的结果就是”blue-is-sky-the”。" class="headerlink" title="题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the sky is blue”,那么反转之后的结果就是”blue is sky the”。"></a>题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the sky is blue”,那么反转之后的结果就是”blue is sky the”。</h2><p>问题分析：</p><ul><li>每个单词长度不一致</li><li>空格需要特殊处理</li></ul><a id="more"></a><p>使用C语言实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">void swap (char chars[], int p, int q);</span><br><span class="line">void reverse (char chars[], int start, int end);</span><br><span class="line">void reverseWords(char strings[]);</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">@autoreleasepool &#123;</span><br><span class="line">char string[] = &quot;the sky is blue&quot;;</span><br><span class="line">reverseWords(string);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void swap (char chars[], int p, int q) &#123;</span><br><span class="line">char temp = chars[p];</span><br><span class="line">chars[p] = chars[q];</span><br><span class="line">chars[q] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void reverse (char chars[], int start, int end) &#123;</span><br><span class="line">NSLog(@&quot;%s&quot;,chars);</span><br><span class="line">int s = start;</span><br><span class="line">int e = end;</span><br><span class="line"></span><br><span class="line">while (s &lt; e) &#123;</span><br><span class="line">swap(chars, s, e);</span><br><span class="line">s += 1;</span><br><span class="line">e -= 1;</span><br><span class="line">&#125;</span><br><span class="line">NSLog(@&quot;%s&quot;,chars);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void reverseWords(char strings[]) &#123;</span><br><span class="line">if ((int)strlen(strings) == 0) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">int start = 0, len = (int)strlen(strings);</span><br><span class="line">reverse(strings, 0, len - 1);</span><br><span class="line">for (int i = 0 ; i &lt; len; i++) &#123;</span><br><span class="line">if ((i == len - 1) || (strings[i + 1] == &apos; &apos;)) &#123;</span><br><span class="line">reverse(strings, start, i);</span><br><span class="line">start = i + 2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">NSLog(@&quot;%s&quot;,strings);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印：<code>2018-08-14 16:04:22.815076+0800 算法[6268:668783] blue is sky the</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the-sky-is-blue”-那么反转之后的结果就是”blue-is-sky-the”。&quot;&gt;&lt;a href=&quot;#题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the-sky-is-blue”-那么反转之后的结果就是”blue-is-sky-the”。&quot; class=&quot;headerlink&quot; title=&quot;题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the sky is blue”,那么反转之后的结果就是”blue is sky the”。&quot;&gt;&lt;/a&gt;题目：给出一个字符串，要求将其按照单词顺序进行反转，比如如果是”the sky is blue”,那么反转之后的结果就是”blue is sky the”。&lt;/h2&gt;&lt;p&gt;问题分析：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个单词长度不一致&lt;/li&gt;
&lt;li&gt;空格需要特殊处理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="C" scheme="http://yoursite.com/categories/C/"/>
    
    
      <category term="C语言" scheme="http://yoursite.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>QLPreviewController</title>
    <link href="http://yoursite.com/2018/05/14/hello-world/"/>
    <id>http://yoursite.com/2018/05/14/hello-world/</id>
    <published>2018-05-14T13:53:54.000Z</published>
    <updated>2018-09-07T06:14:07.776Z</updated>
    
    <content type="html"><![CDATA[<p>QLPreviewController在iOS中用于方便预览文件，它支持的文件有：</p><ul><li>iWork文档</li><li>微软Office97以上版本的文档</li><li>RTF文档</li><li>PDF文件</li><li>图片文件</li><li><p>文本文件和CSV文件</p><p>使用的时候首先要引用<code>#import &lt;QuickLook/QuickLook.h&gt;</code>。</p><a id="more"></a><p>初始化：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_qlPreviewController = [[ QLPreviewController alloc]init];</span><br><span class="line"> _qlPreviewController.dataSource = self;</span><br><span class="line"> _qlPreviewController.delegate = self;</span><br><span class="line"> </span><br><span class="line"> [self presentViewController:_qlPreviewController animated:YES completion:nil];</span><br></pre></td></tr></table></figure><p> QLPreviewController类似于Tableview的使用方法，也是首先遵循代理和数据源代理。然后实现代理方法，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-(NSInteger)numberOfPreviewItemsInPreviewController:(QLPreviewController *)controller&#123;</span><br><span class="line">    return 2;</span><br><span class="line">&#125;</span><br><span class="line">-(id&lt;QLPreviewItem&gt;)previewController:(QLPreviewController *)controller previewItemAtIndex:(NSInteger)index&#123;</span><br><span class="line">    NSString *path = [[NSBundle mainBundle] pathForResource:@&quot;aa&quot; ofType:@&quot;doc&quot;];</span><br><span class="line">    NSURL *myDoucment = [NSURL fileURLWithPath:path];</span><br><span class="line">    return myDoucment;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;QLPreviewController在iOS中用于方便预览文件，它支持的文件有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iWork文档&lt;/li&gt;
&lt;li&gt;微软Office97以上版本的文档&lt;/li&gt;
&lt;li&gt;RTF文档&lt;/li&gt;
&lt;li&gt;PDF文件&lt;/li&gt;
&lt;li&gt;图片文件&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文本文件和CSV文件&lt;/p&gt;
&lt;p&gt;使用的时候首先要引用&lt;code&gt;#import &amp;lt;QuickLook/QuickLook.h&amp;gt;&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Object-C" scheme="http://yoursite.com/categories/Object-C/"/>
    
    
  </entry>
  
</feed>
